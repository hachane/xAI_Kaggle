{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8487598,"sourceType":"datasetVersion","datasetId":5027954},{"sourceId":8504782,"sourceType":"datasetVersion","datasetId":5065871}],"dockerImageVersionId":30097,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# MODULE 1: TRAIN PHASE 1\n## 1.1. Train phase 1","metadata":{}},{"cell_type":"code","source":"import torch\nimport numpy as np\nimport os\nimport pandas as pd\ncuda = True if torch.cuda.is_available() else False\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f'cuda: {cuda}')\n!pip install watermark --quiet\n%load_ext watermark\n%watermark -a 'Le Hoang' -u -d -v -p torch,numpy\n\n# Config\nrseed = 42\n\npostfix_tr = '_tr'\npostfix_te = '_val'\n\ndataset_name = 'tcga-gbm-methxgexcnv-2000-3-omics'\nidx_list = list(range(1,6))\ndata_folder = f'/kaggle/input/{dataset_name}/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler'\nmodel_folder = '/kaggle/working/models'\ntrain_file = f'/kaggle/input/{dataset_name}/main_mogonet.py'\nview_list = [1,2,3]\nnum_epoch_pretrain = 500\nnum_epoch  = 1000\nlr_e_pretrain = 1e-3\nlr_e = 5e-4\nlr_c = 1e-3\n\nbool_using_early_stopping = True\nverbose = False\nprint_hyper = False\n\nfor fold_id in idx_list:\n    print(f'idx data: {fold_id}')\n    \n    data_folder_idx = data_folder + f'/{fold_id}'\n    model_folder_idx = model_folder + f'/{fold_id}'\n\n    !python '{train_file}' '{rseed}' '{data_folder_idx}' '{postfix_tr}' '{postfix_te}' '{model_folder_idx}' '{view_list}' '{num_epoch_pretrain}' '{num_epoch}' '{lr_e_pretrain}' '{lr_e}' '{lr_c}' '{bool_using_early_stopping}' '{verbose}' '{print_hyper}'\n    \n    print('*'*100)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:55:16.565737Z","iopub.execute_input":"2024-05-25T15:55:16.566089Z","iopub.status.idle":"2024-05-25T15:57:51.578375Z","shell.execute_reply.started":"2024-05-25T15:55:16.566007Z","shell.execute_reply":"2024-05-25T15:57:51.577375Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"cuda: True\nAuthor: Le Hoang\n\nLast updated: 2024-05-25\n\nPython implementation: CPython\nPython version       : 3.7.10\nIPython version      : 7.22.0\n\ntorch: 1.7.0\nnumpy: 1.19.5\n\nidx data: 1\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 315th after 300 epochs not increasing score from epoch 15th with best score 0.7073170731707317\n****************************************************************************************************\nidx data: 2\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 343th after 300 epochs not increasing score from epoch 43th with best score 0.7560975609756098\n****************************************************************************************************\nidx data: 3\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 513th after 300 epochs not increasing score from epoch 213th with best score 0.7317073170731707\n****************************************************************************************************\nidx data: 4\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 496th after 300 epochs not increasing score from epoch 196th with best score 0.7317073170731707\n****************************************************************************************************\nidx data: 5\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 622th after 300 epochs not increasing score from epoch 322th with best score 0.7804878048780488\n****************************************************************************************************\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.2. Support functions","metadata":{}},{"cell_type":"code","source":"# II. prepairing raw data\ndef preprocessing_data(tup_tensor_test_data, data_folder):\n    data_tr_list = []\n    data_te_list = []\n#     print(view_list)\n\n    for i in view_list:\n        data_tr_list.append(torch.tensor(np.loadtxt(os.path.join(data_folder, str(i)+\"_tr.csv\"), delimiter=','),dtype=torch.float32))\n        data_te_list.append(tup_tensor_test_data[i-1])\n#         print(os.path.join(data_folder, str(i)+\"_tr.csv\"))\n#         print('tttd', tup_tensor_test_data[i-1].shape)\n#         print(data_tr_list[i-1].shape, data_te_list[i-1].shape)   \n        if cuda:\n            data_tr_list[i-1] = data_tr_list[i-1].to(device)\n            data_te_list[i-1] = data_te_list[i-1].to(device)       \n\n    # num train's records, test's records\n    num_tr = data_tr_list[0].shape[0]\n    num_te = data_te_list[0].shape[0]\n\n    # idx\n    trte_idx = {}\n    trte_idx[\"tr\"] = list(range(num_tr))\n    trte_idx[\"te\"] = list(range(num_tr, (num_tr+num_te)))\n\n    # num of views or num of omics\n    num_view = len(view_list)\n    data_tensor_list = []\n    for i in range(num_view):\n        data_tensor_list.append(torch.cat((data_tr_list[i], data_te_list[i]), axis=0))\n        if cuda:\n            data_tensor_list[i] = data_tensor_list[i].to(device)#cuda()\n    \n    data_train_list = []\n    data_trte_list = []\n    for i in range(len(data_tensor_list)):\n        data_train_list.append(data_tensor_list[i][trte_idx[\"tr\"]].clone())\n\n        tup_seq_data = (data_tensor_list[i][trte_idx[\"tr\"]].clone(), data_tensor_list[i][trte_idx[\"te\"]].clone())\n        data_trte_list.append(\n            torch.cat(tup_seq_data,axis=0)\n        )\n    return data_train_list, data_trte_list,trte_idx\n\n\n# III. For Feature Important\n\ndef custom_logit_predictor(*tup_tensor_data, data_folder):\n    for m in model_dict:\n        if cuda:\n            model_dict[m].to(device)#cuda()\n        model_dict[m].eval()\n    tup_tensor_data = tuple(tensor_data.to(device) if cuda else tensor_data for tensor_data in tup_tensor_data)\n#     print('tsd', tup_tensor_data[0].shape)\n    data_tr_list, data_trte_list, trte_idx = preprocessing_data(tup_tensor_data, data_folder)\n    _, adj_trte_list = gen_trte_adj_mat(data_tr_list, data_trte_list, trte_idx, adj_parameter)\n    \n    ci_list = []\n    num_view = len(view_list)\n    for i in range(num_view):\n        ci_list.append(model_dict[\"C{:}\".format(i+1)](model_dict[\"E{:}\".format(i+1)](data_trte_list[i],adj_trte_list[i])))\n    if num_view >= 2:\n        c = model_dict[\"C\"](ci_list)    \n    else:\n        c = ci_list[0]\n    c = c[trte_idx[\"te\"],:]\n#     prob = F.softmax(c, dim=1).data.cpu().numpy()\n    return c","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:57:51.580226Z","iopub.execute_input":"2024-05-25T15:57:51.580550Z","iopub.status.idle":"2024-05-25T15:57:51.599247Z","shell.execute_reply.started":"2024-05-25T15:57:51.580506Z","shell.execute_reply":"2024-05-25T15:57:51.598351Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Subtypes\nLABEL_MAPPING_FULL_NAME = {0: 'Classical',\n1: 'Neural',\n2: 'Proneural',\n3: 'Mesenchymal'}.values()\n\nLABEL_MAPPING_NAME = {0: 'Classical',\n1: 'Neural',\n2: 'Proneural',\n3: 'Mesenchymal'}.values()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:57:51.600782Z","iopub.execute_input":"2024-05-25T15:57:51.601135Z","iopub.status.idle":"2024-05-25T15:57:51.612183Z","shell.execute_reply.started":"2024-05-25T15:57:51.601092Z","shell.execute_reply":"2024-05-25T15:57:51.611349Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import sys\nsys.path.append(f'/kaggle/input/{dataset_name}/')\nprint(sys.path)\n\nfrom models import init_model_dict\nfrom utils import load_model_dict\nfrom train_test import prepare_trte_data, gen_trte_adj_mat, test_epoch\n\nfrom train_test import train_test\nfrom train_test import gen_trte_adj_mat\n\nnum_view = len(view_list)\nnum_class = len(LABEL_MAPPING_NAME)\nif num_class == 2:\n    adj_parameter = 2\n    dim_he_list = [200,200,100]\nif num_class > 2:\n    adj_parameter = 10\n    dim_he_list = [400,400,200]\ndim_hvcdn= pow(num_class,num_view)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:57:51.613515Z","iopub.execute_input":"2024-05-25T15:57:51.613816Z","iopub.status.idle":"2024-05-25T15:57:51.988011Z","shell.execute_reply.started":"2024-05-25T15:57:51.613776Z","shell.execute_reply":"2024-05-25T15:57:51.987226Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"['/kaggle/working', '/kaggle/lib/kagglegym', '/kaggle/lib', '/opt/conda/lib/python37.zip', '/opt/conda/lib/python3.7', '/opt/conda/lib/python3.7/lib-dynload', '', '/root/.local/lib/python3.7/site-packages', '/opt/conda/lib/python3.7/site-packages', '/src/bq-helper', '/opt/conda/lib/python3.7/site-packages/IPython/extensions', '/root/.ipython', '/kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.3. Load trained models and check accuracy phase 1","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix,ConfusionMatrixDisplay\n\n\nfor idx in idx_list:\n    cur_model_folder = f'/kaggle/working/models/{idx}'\n    print(cur_model_folder)\n    cur_data_folder = f\"{data_folder}/{idx}/\"\n    \n    \n    # ---- load paper's model1\n    data_tr_list, data_trte_list, trte_idx, labels_trte = prepare_trte_data(cur_data_folder, view_list)\n    dim_list= [x.shape[1] for x in data_tr_list]\n\n\n    model_dict = init_model_dict(num_view, num_class, dim_list, dim_he_list, dim_hvcdn)\n\n    model_dict = load_model_dict(cur_model_folder, model_dict)\n    # ---- Done\n    \n    _data_list=[]\n    _type_data = 'te'\n    # _type_data = 'tr'\n    print(\"\\n\\n\")\n\n    _label = labels_te = np.loadtxt(os.path.join(cur_data_folder, f\"labels_{_type_data}.csv\"), delimiter=',').astype(int)\n\n    for i in view_list:\n        _data_loc = os.path.join(cur_data_folder, f\"{i}_{_type_data}.csv\")\n        _data_list.append(np.loadtxt(_data_loc, delimiter=','))\n    _tensor_data_list = tuple(torch.tensor(np_arr,dtype=torch.float32).to(device) for np_arr in _data_list)\n    pred = custom_logit_predictor(*_tensor_data_list, data_folder=cur_data_folder)\n\n    pred=np.array(torch.argmax(pred.cpu(),dim=1))\n\n    display(pd.DataFrame({'ground_truth': np.bincount(_label, minlength=len(LABEL_MAPPING_FULL_NAME)), 'pred': np.bincount(pred, minlength=len(LABEL_MAPPING_FULL_NAME))},index=LABEL_MAPPING_FULL_NAME))\n\n    clf_report = classification_report(_label, \n                                            pred, \n                                            target_names=LABEL_MAPPING_NAME, \n                                            digits=4, \n                                            zero_division=0, \n                                            output_dict=True)\n\n    clf_df = pd.DataFrame(clf_report)\n    clf_df.loc[['precision', 'recall'],'accuracy']=np.nan\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_figwidth(12)\n    ConfusionMatrixDisplay(confusion_matrix(_label, pred), \n                                display_labels=LABEL_MAPPING_NAME).plot(cmap='Blues', ax=ax1)\n    sns.heatmap(clf_df.iloc[:-1, :].T, annot=True, cmap='Blues', robust=True, ax=ax2, fmt='.2%')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:57:51.989161Z","iopub.execute_input":"2024-05-25T15:57:51.989452Z","iopub.status.idle":"2024-05-25T15:58:12.770105Z","shell.execute_reply.started":"2024-05-25T15:57:51.989424Z","shell.execute_reply":"2024-05-25T15:58:12.769240Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"/kaggle/working/models/1\n\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"             ground_truth  pred\nClassical              10    12\nNeural                  7     0\nProneural              11    11\nMesenchymal            12    17","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ground_truth</th>\n      <th>pred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Classical</th>\n      <td>10</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>Neural</th>\n      <td>7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Proneural</th>\n      <td>11</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>Mesenchymal</th>\n      <td>12</td>\n      <td>17</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 4 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"/kaggle/working/models/2\n\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"             ground_truth  pred\nClassical              10    13\nNeural                  7     1\nProneural              11    10\nMesenchymal            12    16","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ground_truth</th>\n      <th>pred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Classical</th>\n      <td>10</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>Neural</th>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Proneural</th>\n      <td>11</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>Mesenchymal</th>\n      <td>12</td>\n      <td>16</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 4 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"/kaggle/working/models/3\n\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"             ground_truth  pred\nClassical              10     7\nNeural                  7     7\nProneural              11    11\nMesenchymal            12    15","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ground_truth</th>\n      <th>pred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Classical</th>\n      <td>10</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Neural</th>\n      <td>7</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Proneural</th>\n      <td>11</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>Mesenchymal</th>\n      <td>12</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 4 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"/kaggle/working/models/4\n\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"             ground_truth  pred\nClassical              10     9\nNeural                  7     4\nProneural              11    13\nMesenchymal            12    14","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ground_truth</th>\n      <th>pred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Classical</th>\n      <td>10</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>Neural</th>\n      <td>7</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Proneural</th>\n      <td>11</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>Mesenchymal</th>\n      <td>12</td>\n      <td>14</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 4 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"/kaggle/working/models/5\n\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"             ground_truth  pred\nClassical              10     6\nNeural                  7     6\nProneural              11    12\nMesenchymal            12    16","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ground_truth</th>\n      <th>pred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Classical</th>\n      <td>10</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Neural</th>\n      <td>7</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Proneural</th>\n      <td>11</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>Mesenchymal</th>\n      <td>12</td>\n      <td>16</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 4 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"# MODULE 2: Integrated Gradient","metadata":{}},{"cell_type":"markdown","source":"## 2.1. Baselines","metadata":{}},{"cell_type":"markdown","source":"Support functions","metadata":{}},{"cell_type":"code","source":"# function to check whether the data is discrete or not\n# Kiểm tra dữ liệu có là rời rạc\ndef is_discrete(matrix):\n    return np.issubdtype(matrix.dtype, np.integer)\n\n# # function to create a baseline from choosing mode in each column\n# def mode_per_column(matrix):\n#     modes = np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=0, arr=matrix)\n#     modes = torch.tensor(modes)\n#     return modes\n\n# # Tính mode cho từng cột theo từng nhóm nhãn\n# def mode_per_column(matrix, labels):\n#     unique_labels = np.unique(labels)\n#     modes = np.zeros(matrix.shape[1])\n#     for col in range(matrix.shape[1]):\n#         col_modes = []\n#         for label in unique_labels:\n#             label_indices = np.where(labels == label)[0]\n#             label_column = matrix[label_indices, col]\n#             mode_label, _ = mode(label_column, axis=0)\n#             col_modes.append(mode_label[0])\n#         modes[col] = np.mean(col_modes)\n#     return torch.tensor(modes, dtype=torch.float).unsqueeze(0)\n\n# Tính trung bình theo cột (micro mean)\ndef micro_mean_per_column(matrix):\n    means = np.mean(matrix, axis=0)\n    return torch.tensor(means, dtype=torch.float).unsqueeze(0)\n\n# Tính trung bình theo cột (macro mean) theo từng nhóm nhãn\ndef macro_mean_per_column(matrix, labels):\n    unique_labels = np.unique(labels)\n    means = np.zeros(matrix.shape[1])\n    for col in range(matrix.shape[1]):\n        col_means = [\n            np.mean(matrix[labels == label, col]) \n            for label in unique_labels\n        ]\n        means[col] = np.mean(col_means)\n    return torch.tensor(means, dtype=torch.float).unsqueeze(0)\n\ndef micro_mean_per_column_excluding_subtype(matrix, labels, subtype_idx):\n    indices_to_include = np.where(labels != subtype_idx)[0]\n    matrix = matrix[indices_to_include]\n    means = np.mean(matrix, axis=0)\n    return torch.tensor(means, dtype=torch.float).unsqueeze(0)\n\ndef macro_mean_per_column_excluding_subtype(matrix, labels, subtype_idx):\n    unique_labels = np.unique(labels)\n    means = np.zeros(matrix.shape[1])\n    for col in range(matrix.shape[1]):\n        col_means = [\n            np.mean(matrix[labels == label, col]) \n            for label in unique_labels \n            if label != subtype_idx\n        ]\n        means[col] = np.mean(col_means)\n    return torch.tensor(means, dtype=torch.float).unsqueeze(0)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:58:12.771257Z","iopub.execute_input":"2024-05-25T15:58:12.771537Z","iopub.status.idle":"2024-05-25T15:58:12.783424Z","shell.execute_reply.started":"2024-05-25T15:58:12.771508Z","shell.execute_reply":"2024-05-25T15:58:12.782463Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"import torch\nfrom scipy.stats import mode","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:58:12.784553Z","iopub.execute_input":"2024-05-25T15:58:12.784856Z","iopub.status.idle":"2024-05-25T15:58:12.797523Z","shell.execute_reply.started":"2024-05-25T15:58:12.784827Z","shell.execute_reply":"2024-05-25T15:58:12.796742Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"all_baselines_name = [\n    'baseline_ig_zeros',\n    'baseline_ig_micro_means',\n    'baseline_ig_macro_means',\n    'baseline_ig_dict_default_micro_means',\n    'baseline_ig_dict_default_macro_means',\n    'baseline_ig_micro_mean_zero1',\n    'baseline_ig_micro_mean_zero2',\n    'baseline_ig_micro_mean_zero3',\n    'baseline_ig_macro_mean_zero1',\n    'baseline_ig_macro_mean_zero2',\n    'baseline_ig_macro_mean_zero3',\n]\nnum_baselines = 11","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:58:12.800594Z","iopub.execute_input":"2024-05-25T15:58:12.800948Z","iopub.status.idle":"2024-05-25T15:58:12.806664Z","shell.execute_reply.started":"2024-05-25T15:58:12.800906Z","shell.execute_reply":"2024-05-25T15:58:12.805821Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"import torch\nimport numpy as np\nfrom scipy.stats import mode\n\ndef init_baselines(input, _label, ith_baseline, subtype_idx=None, omic_idx=None):\n    _data_list = []\n    for omic_id in view_list:\n        matrix = input[omic_id - 1]\n        if isinstance(matrix, torch.Tensor):\n            matrix = matrix.cpu().numpy()\n        _data_list.append(matrix)\n\n    # IG-zeros----------------------------------------------------------------------------\n    if ith_baseline == 0:\n        baseline_ig_zeros = tuple(torch.zeros((1, matrix.shape[1]), dtype=torch.float) for matrix in _data_list)\n        return baseline_ig_zeros\n\n    # IG-micro-means-----------------------------------------------------------------------\n    if ith_baseline == 1:\n        baseline_ig_micro_means = []\n        for matrix in _data_list:\n            tmp = micro_mean_per_column(matrix)\n            baseline_ig_micro_means.append(tmp)\n        baseline_ig_micro_means = tuple(baseline_ig_micro_means)\n        return baseline_ig_micro_means\n    \n    # IG-macro-means----------------------------------------------------------------\n    if ith_baseline == 2:\n        baseline_ig_macro_means = []\n        for matrix in _data_list:\n            tmp = macro_mean_per_column(matrix, _label)\n            baseline_ig_macro_means.append(tmp)\n        baseline_ig_macro_means = tuple(baseline_ig_macro_means)\n        return baseline_ig_macro_means\n    \n    # IG-dict-default-micro-means-------------------------------------------------------------\n    if ith_baseline == 3 and subtype_idx is not None:\n        baseline_ig_dict_default_micro_means = []\n        for matrix in _data_list:\n            tmp = micro_mean_per_column_excluding_subtype(matrix, _label, subtype_idx)\n            baseline_ig_dict_default_micro_means.append(tmp)\n        baseline_ig_dict_default_micro_means = tuple(baseline_ig_dict_default_micro_means)\n        return baseline_ig_dict_default_micro_means\n    \n    # IG-dict-default-macro-means--------------------------------------------------------\n    if ith_baseline == 4 and subtype_idx is not None:\n        baseline_ig_dict_default_macro_means = []\n        for matrix in _data_list:\n            tmp = macro_mean_per_column_excluding_subtype(matrix, _label, subtype_idx)\n            baseline_ig_dict_default_macro_means.append(tmp)\n        baseline_ig_dict_default_macro_means = tuple(baseline_ig_dict_default_macro_means)\n        return baseline_ig_dict_default_macro_means\n    \n    # IG-micro-mean--zero----------------------------------------------------------------\n    if ith_baseline == 5 and omic_idx is not None:\n        baseline_ig_micro_mean_zero = []\n        for omic_id, matrix in enumerate(_data_list):\n            if (omic_id != omic_idx):\n                tmp = micro_mean_per_column(matrix)\n                baseline_ig_micro_mean_zero.append(tmp)\n            else:\n                baseline_ig_micro_mean_zero.append(torch.zeros((1, matrix.shape[1]), dtype=torch.float))\n        baseline_ig_micro_mean_zero = tuple(baseline_ig_micro_mean_zero)\n        return baseline_ig_micro_mean_zero\n    \n    # IG-macro-mean--zero----------------------------------------------------------------\n    if ith_baseline == 6 and omic_idx is not None:\n        baseline_ig_macro_mean_zero = []\n        for omic_id, matrix in enumerate(_data_list):\n            if (omic_id != omic_idx):\n                tmp = macro_mean_per_column(matrix, _label)\n                baseline_ig_macro_mean_zero.append(tmp)\n            else:\n                baseline_ig_macro_mean_zero.append(torch.zeros((1, matrix.shape[1]), dtype=torch.float))\n        baseline_ig_macro_mean_zero = tuple(baseline_ig_macro_mean_zero)\n        return baseline_ig_macro_mean_zero\n\n\n    return None  # Trả về None nếu chỉ số ith_baseline không hợp lệ","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:58:12.808238Z","iopub.execute_input":"2024-05-25T15:58:12.808587Z","iopub.status.idle":"2024-05-25T15:58:12.824980Z","shell.execute_reply.started":"2024-05-25T15:58:12.808559Z","shell.execute_reply":"2024-05-25T15:58:12.824201Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"## 2.2. Calculate IG's score of each feature from: data + trained model","metadata":{}},{"cell_type":"code","source":"def calculate_attribution_scores_for_folder(input, _label, data_folder, ith_baseline, omic_idx):\n    \n    # Initialize Integrated Gradients with the custom model predictor\n    ig = IntegratedGradients(lambda *inputs: custom_logit_predictor(*inputs, data_folder=data_folder))\n    \n    # Calculate attribute scores by batch data to avoid running out of memory\n    # 200 is the maximum (approximate) number of samples that will not cause run out of memory\n    max_samples_per_batch = 100\n    number_of_samples = len(_label)\n    list_end_index = [max_samples_per_batch * times \n                      for times in range(1, int(np.ceil(number_of_samples / max_samples_per_batch)))] + [number_of_samples]\n\n    if ith_baseline not in [3,4]:\n        # Initialize baseline\n        baseline = init_baselines(input, _label, ith_baseline, omic_idx=omic_idx)\n        if cuda:\n            baseline = tuple(tensor_i.cuda() for tensor_i in baseline)\n\n        # Ensure the custom logit predictor is called with the baseline and data_folder\n        custom_logit_predictor(*baseline, data_folder=data_folder)\n\n        # Preprocess data\n        data_tr_list, data_trte_list, trte_idx = preprocessing_data(baseline, data_folder=data_folder)\n    \n    attr = {}\n    for subtype_idx, subtype in enumerate(LABEL_MAPPING_NAME):\n        if ith_baseline in [3,4]:\n            # Initialize baseline\n            baseline = init_baselines(input, _label, ith_baseline, subtype_idx)\n            if cuda:\n                baseline = tuple(tensor_i.cuda() for tensor_i in baseline)\n\n            # Ensure the custom logit predictor is called with the baseline and data_folder\n            custom_logit_predictor(*baseline, data_folder=data_folder)\n\n            # Preprocess data\n            data_tr_list, data_trte_list, trte_idx = preprocessing_data(baseline, data_folder=data_folder)\n        \n        start = 0\n#         print(f'Calculate attribution scores with subtype {subtype}:')\n        for end in list_end_index:\n#             print(f'\\t samples from iloc {start} to {end}')\n            \n            input_tensor = tuple(input_omic[start:end].requires_grad_() for input_omic in input)\n            \n            # NEVER FORGET TO PUT BASELINE IN\n            attr_temp, delta_temp = ig.attribute(input_tensor,baseline,\n                                                 target=subtype_idx, return_convergence_delta=True)\n            # Concatenate genes attribute score for multi-omics data\n            attr_temp = np.concatenate(\n                tuple(attr_temp[idx_atr].detach().cpu().numpy() for idx_atr in range(len(attr_temp))), axis=1\n            )\n            if start == 0:\n                attr[subtype] = attr_temp\n            else:\n                attr[subtype] = np.concatenate((attr[subtype], attr_temp), axis=0)\n            start = end\n    print(f\"Attribution scores for data in folder {data_folder} calculated.\")\n    return attr","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:58:12.826183Z","iopub.execute_input":"2024-05-25T15:58:12.826468Z","iopub.status.idle":"2024-05-25T15:58:12.839920Z","shell.execute_reply.started":"2024-05-25T15:58:12.826443Z","shell.execute_reply":"2024-05-25T15:58:12.839064Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"## 2.3. RANK THE GENE BY ATTR SCORES AND MAPPING NAMES","metadata":{}},{"cell_type":"markdown","source":"**A new version just in case in the future, there are duplicates names between many types of omics**\n\n**A new version just in case in the future, there are duplicates names between many types of omics**\n- **Current version**: calculate attribute scores -> assign attribute scores with names -> sort -> take the top 50 genes -> ...find 50 names in 2503 names -> extract with the indices of 50 names in the original list 2503 names\n\n$\\implies$ however Mr.Hoang took the step that: take the avg scores of same gene in 3 types of omic data to eliminate the duplicate genes in 2503 genes\n\n$\\implies$ is it really fair? what if $\\text{significant scores} + \\frac{\\text{low scores}}{3} = \\text{normal scores}$; at that we have ignored a significant gene\n\n- **Below version**: calculate attribute scores -> add a column as indices with these attribution scores (like original indices to trace back like sorting problem) -> sort -> take the top 50 genes -> take the original indices also sorted according to these 50 genes -> extract the original list with these indices.","metadata":{}},{"cell_type":"code","source":"!pip install captum --quiet\nfrom captum.attr import IntegratedGradients\nfrom IPython.display import display, HTML","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:58:12.840880Z","iopub.execute_input":"2024-05-25T15:58:12.841150Z","iopub.status.idle":"2024-05-25T15:58:20.433241Z","shell.execute_reply.started":"2024-05-25T15:58:12.841113Z","shell.execute_reply":"2024-05-25T15:58:20.432311Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"matrix_top_thres_lst = []\nindices_matrix_top_thres_lst = []\n\nfor _ith_baseline in range(num_baselines):\n    print('-' * 20, all_baselines_name[_ith_baseline], '-' * 20)\n    \n    _baseline_mapping = {\n        5: (5, 0),\n        6: (5, 1),\n        7: (5, 2),\n        8: (6, 0),\n        9: (6, 1),\n        10: (6, 2)\n    }\n\n    # Use the dictionary to get ith_baseline and omic_idx, defaulting ith_baseline to _ith_baseline and omic_idx to None\n    ith_baseline, omic_idx = _baseline_mapping.get(_ith_baseline, (_ith_baseline, None))\n    \n    # Initialize an empty dictionary to store aggregated df_attr for each subtype\n    aggregated_df_attr = {subtype: pd.DataFrame() for subtype in LABEL_MAPPING_NAME}\n\n    for idx in idx_list:\n        cur_model_folder = f'/kaggle/working/models/{idx}'\n        print(cur_model_folder)\n        cur_data_folder = f\"{data_folder}/{idx}/\"\n\n\n        # ---- load paper's model1\n        data_tr_list, data_trte_list, trte_idx, labels_trte = prepare_trte_data(cur_data_folder, view_list)\n        dim_list= [x.shape[1] for x in data_tr_list]\n\n\n        model_dict = init_model_dict(num_view, num_class, dim_list, dim_he_list, dim_hvcdn)\n\n        model_dict = load_model_dict(cur_model_folder, model_dict)\n        # ---- Done\n\n        _data_list=[]\n        _type_data = 'te'\n        # _type_data = 'tr'\n\n        _label = labels_te = np.loadtxt(os.path.join(cur_data_folder, f\"labels_{_type_data}.csv\"), delimiter=',').astype(int)\n\n        for i in view_list:\n            _data_loc = os.path.join(cur_data_folder, f\"{i}_{_type_data}.csv\")\n            _data_list.append(np.loadtxt(_data_loc, delimiter=','))\n        _tensor_data_list = tuple(torch.tensor(np_arr,dtype=torch.float32).to(device) for np_arr in _data_list)\n        pred = custom_logit_predictor(*_tensor_data_list, data_folder=cur_data_folder)\n#         print('_tdl', _tensor_data_list[0].shape)\n\n        attr = calculate_attribution_scores_for_folder(_tensor_data_list, _label, cur_data_folder, ith_baseline, omic_idx)\n\n        gene_name = []\n        for v in view_list:\n            df = pd.read_csv(os.path.join(cur_data_folder, f\"{v}_featname.csv\"), header=None)    \n            gene_name.extend(df[0].str.split(r'\\|').str[0].values.tolist())\n\n        df_attr = {}\n        # Build dataframe and rename gene id to gene name\n        for subtype in LABEL_MAPPING_NAME:\n            subtype_df = pd.DataFrame(attr[subtype], columns=gene_name)\n\n        # Take mean all column (gene name) that have same name\n            subtype_df = subtype_df.groupby(by=subtype_df.columns, axis=1).mean()\n\n            # Aggregate the dataframes for each subtype\n            if aggregated_df_attr[subtype].empty:\n                aggregated_df_attr[subtype] = subtype_df\n            else:\n                aggregated_df_attr[subtype] = pd.concat([aggregated_df_attr[subtype], subtype_df])\n\n    # y predict by classifier/pretrained model\n    THRESHOLD = 100\n\n    y_predict = pred\n    y_interpret = labels_te\n\n    for subtype in LABEL_MAPPING_NAME:\n        aggregated_df_attr[subtype] = aggregated_df_attr[subtype].groupby(by=aggregated_df_attr[subtype].columns, axis=1).sum()\n\n    rank_score_by_subtype = {}\n\n    matrix_top_threshold = pd.DataFrame()\n    indices_matrix_top_threshold = pd.DataFrame()\n    for idx_2, subtype in enumerate(LABEL_MAPPING_NAME):\n        temp_score = aggregated_df_attr[subtype].mean(axis=0)\n        rank_score_by_subtype[subtype] = temp_score.abs().sort_values(ascending=True)\n\n        if len(LABEL_MAPPING_NAME) == 2:\n            # Binary Classifier\n            threshold_inner = THRESHOLD\n            count_inner = 0\n            while count_inner != THRESHOLD:\n                count_inner = rank_score_by_subtype[subtype].iloc[:threshold_inner].index.nunique()\n                if count_inner != THRESHOLD:\n                    threshold_inner = threshold_inner+1\n                else:\n                    temp = pd.Series(list(rank_score_by_subtype[subtype].iloc[:threshold_inner].index))\n                    temp = temp[~temp.duplicated(keep='first')].reset_index(drop=True)\n                    matrix_top_threshold[subtype] = temp\n        else:\n            # Multi-class Classifier\n            matrix_top_threshold[subtype] = list(rank_score_by_subtype[subtype].iloc[:THRESHOLD].index)\n            indices_matrix_top_threshold[subtype] = list(rank_score_by_subtype[subtype].iloc[:THRESHOLD].to_numpy())\n\n        save_matrix_dir = f'/kaggle/working/biomarkers/{ith_baseline}_{all_baselines_name[ith_baseline]}'\n        if not os.path.exists(save_matrix_dir):\n            os.makedirs(save_matrix_dir)\n        matrix_top_threshold.to_csv(f'{save_matrix_dir}/matrix_biomarkers.csv',index=False)\n        indices_matrix_top_threshold.to_csv(f'{save_matrix_dir}/indices_matrix_biomarkers.csv',index=False)\n\n\n    #     Displaying gene for debugging\n    print()\n    for thres in np.linspace(10,100,10,dtype=int):\n        print(f'Number of unique genes top {thres}:',len(set(matrix_top_threshold.iloc[:thres,:].to_numpy(copy=True).reshape(-1).tolist())))\n\n    print()\n    display(HTML(matrix_top_threshold.iloc[:20,:].to_html()))\n    \n    matrix_top_thres_lst.append(matrix_top_threshold)\n    indices_matrix_top_thres_lst.append(indices_matrix_top_threshold)\n    \n    print('*' * 70)\n    print('\\n\\n')","metadata":{"execution":{"iopub.status.busy":"2024-05-25T15:58:20.434782Z","iopub.execute_input":"2024-05-25T15:58:20.435084Z","iopub.status.idle":"2024-05-25T16:21:10.839572Z","shell.execute_reply.started":"2024-05-25T15:58:20.435051Z","shell.execute_reply":"2024-05-25T16:21:10.838727Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"-------------------- baseline_ig_zeros --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 38\nNumber of unique genes top 20: 78\nNumber of unique genes top 30: 115\nNumber of unique genes top 40: 151\nNumber of unique genes top 50: 190\nNumber of unique genes top 60: 221\nNumber of unique genes top 70: 252\nNumber of unique genes top 80: 282\nNumber of unique genes top 90: 313\nNumber of unique genes top 100: 342\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>MIR28</td>\n      <td>GSTP1</td>\n      <td>IMPG2</td>\n      <td>PNLIPRP2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>FCAR</td>\n      <td>UXS1</td>\n      <td>IFIH1</td>\n      <td>CHMP1B</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GSTP1</td>\n      <td>RBBP4</td>\n      <td>MIR216B</td>\n      <td>FLJ10925</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SNORD39</td>\n      <td>GPR75</td>\n      <td>MSC</td>\n      <td>CLIP3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>UXS1</td>\n      <td>ZNF721</td>\n      <td>MIR563</td>\n      <td>CCDC90A</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>RNA5SP93</td>\n      <td>BXDC1</td>\n      <td>ADORA2B</td>\n      <td>CDK6</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CEBPZ</td>\n      <td>LRRIQ4</td>\n      <td>JPH2</td>\n      <td>PSMD4</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>PRUNE</td>\n      <td>RGSL2</td>\n      <td>SLC25A18</td>\n      <td>ZNF141</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>ZNF510</td>\n      <td>C1orf217</td>\n      <td>SPAG5</td>\n      <td>FER1L5</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>MIR571</td>\n      <td>MYL5</td>\n      <td>ZNF860</td>\n      <td>GULP1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>RN7SL857P</td>\n      <td>DLX3</td>\n      <td>PTHR1</td>\n      <td>DOCK9</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>ZNF585A</td>\n      <td>SLAMF1</td>\n      <td>RECQL4</td>\n      <td>EYA4</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>GGTLA4</td>\n      <td>PFKP</td>\n      <td>NOTO</td>\n      <td>TENC1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>RHOF</td>\n      <td>LRP16</td>\n      <td>ITGBL1</td>\n      <td>PTDSS1</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>RRP15</td>\n      <td>FAM177B</td>\n      <td>DNAI1</td>\n      <td>ZNF449</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>RN7SKP88</td>\n      <td>TADA3L</td>\n      <td>SNORA73B</td>\n      <td>TRIP10</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>MRPL30</td>\n      <td>MGC33486</td>\n      <td>TMEM222</td>\n      <td>USH2A</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>MGC12966</td>\n      <td>RN7SKP208</td>\n      <td>CD300LB</td>\n      <td>PNRC1</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>RSRC1</td>\n      <td>PCDHGA4</td>\n      <td>AIM1L</td>\n      <td>NUP210</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>ZNF688</td>\n      <td>HSD11B2</td>\n      <td>TMCO3</td>\n      <td>TRAF3</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_micro_means --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 37\nNumber of unique genes top 20: 75\nNumber of unique genes top 30: 105\nNumber of unique genes top 40: 134\nNumber of unique genes top 50: 167\nNumber of unique genes top 60: 198\nNumber of unique genes top 70: 230\nNumber of unique genes top 80: 260\nNumber of unique genes top 90: 287\nNumber of unique genes top 100: 317\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CBX2</td>\n      <td>HNRPA3</td>\n      <td>USP20</td>\n      <td>RAPGEF3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>C18orf20</td>\n      <td>MTHFD2</td>\n      <td>CMTM4</td>\n      <td>FAM132B</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SMG7</td>\n      <td>FUBP3</td>\n      <td>TULP2</td>\n      <td>USP20</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CLASP2</td>\n      <td>LOC84661</td>\n      <td>DOPEY2</td>\n      <td>C19orf37</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PSMD4</td>\n      <td>C10orf137</td>\n      <td>CEP250</td>\n      <td>HSPC268</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NKX2-2</td>\n      <td>SULT1C3</td>\n      <td>ZNF286</td>\n      <td>NIPAL4</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>HYAL2</td>\n      <td>ZNF180</td>\n      <td>PTHR1</td>\n      <td>CHRDL2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>WBSCR23</td>\n      <td>UQCC</td>\n      <td>C16orf28</td>\n      <td>TULP2</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>CRH</td>\n      <td>ZNRF2</td>\n      <td>OXNAD1</td>\n      <td>C6orf62</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>TULP2</td>\n      <td>NPFF</td>\n      <td>HIST1H4B</td>\n      <td>ARL4C</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>MAN1A2</td>\n      <td>FEZF2</td>\n      <td>PI4KII</td>\n      <td>LOC90355</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>MAPK1</td>\n      <td>GPR45</td>\n      <td>SERP1</td>\n      <td>FLJ14437</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>C14orf29</td>\n      <td>ZBTB11</td>\n      <td>YTHDF2</td>\n      <td>FAM177B</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>PAN3</td>\n      <td>ALDH1L1</td>\n      <td>C18orf1</td>\n      <td>DISP1</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>PCF11</td>\n      <td>PSMD4</td>\n      <td>CBX2</td>\n      <td>FLJ13909</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>ASB18</td>\n      <td>PRUNE</td>\n      <td>MCL1</td>\n      <td>WDR3</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>ORF1-FL49</td>\n      <td>CHCHD8</td>\n      <td>UGT1A7</td>\n      <td>TRAF3</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>MYOT</td>\n      <td>ZCCHC6</td>\n      <td>RN7SKP66</td>\n      <td>CLUAP1</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>BOP1</td>\n      <td>MSL3P1</td>\n      <td>DPEP3</td>\n      <td>NMS</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>ZBTB8OS</td>\n      <td>PRPS1L1</td>\n      <td>PAGE4</td>\n      <td>snoZ247</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_macro_means --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 37\nNumber of unique genes top 20: 70\nNumber of unique genes top 30: 100\nNumber of unique genes top 40: 135\nNumber of unique genes top 50: 164\nNumber of unique genes top 60: 193\nNumber of unique genes top 70: 224\nNumber of unique genes top 80: 254\nNumber of unique genes top 90: 287\nNumber of unique genes top 100: 317\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LOC93349</td>\n      <td>HNRPA3</td>\n      <td>ARD1A</td>\n      <td>C4orf30</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>VPS13C</td>\n      <td>CBX2</td>\n      <td>TULP2</td>\n      <td>LOC90355</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GJB6</td>\n      <td>MIR1224</td>\n      <td>DOPEY2</td>\n      <td>LARP6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>MLLT6</td>\n      <td>SERP1</td>\n      <td>STX11</td>\n      <td>EIF5A2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PIPOX</td>\n      <td>PNPT1</td>\n      <td>TACC3</td>\n      <td>CDKL5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PAGE4</td>\n      <td>ZNRF2</td>\n      <td>C18orf1</td>\n      <td>TULP2</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>SPTSSB</td>\n      <td>STMN3</td>\n      <td>SSSCA1</td>\n      <td>MLLT6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>UBAP1</td>\n      <td>GATA2</td>\n      <td>ZBTB8A</td>\n      <td>NANP</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>PSMC2</td>\n      <td>SPAG5</td>\n      <td>RN7SKP113</td>\n      <td>RN7SKP113</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>LGI1</td>\n      <td>MAP1A</td>\n      <td>REV1</td>\n      <td>MGC29898</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>DCXR</td>\n      <td>PENK</td>\n      <td>HIST1H4B</td>\n      <td>GPR18</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>PAN3</td>\n      <td>PSMD4</td>\n      <td>USP20</td>\n      <td>C11orf67</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>MGC13125</td>\n      <td>ALDH1L1</td>\n      <td>TRAF3</td>\n      <td>SLD5</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>TULP2</td>\n      <td>CTDSPL</td>\n      <td>CDC42EP3</td>\n      <td>FAM132B</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>PSMD4</td>\n      <td>TSGA14</td>\n      <td>FARP2</td>\n      <td>ELOVL3</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>C20orf111</td>\n      <td>LOC84661</td>\n      <td>VASH2</td>\n      <td>CHRDL2</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>FOXJ2</td>\n      <td>TULP2</td>\n      <td>IRS4</td>\n      <td>PSMD4</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>SEMA3A</td>\n      <td>PPIF</td>\n      <td>TIMELESS</td>\n      <td>TRAF3</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>SERP1</td>\n      <td>STC1</td>\n      <td>EZH1</td>\n      <td>EZH1</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>RNF138</td>\n      <td>MIR581</td>\n      <td>TFF1</td>\n      <td>HSPC268</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_dict_default_micro_means --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 35\nNumber of unique genes top 20: 72\nNumber of unique genes top 30: 106\nNumber of unique genes top 40: 140\nNumber of unique genes top 50: 169\nNumber of unique genes top 60: 202\nNumber of unique genes top 70: 237\nNumber of unique genes top 80: 271\nNumber of unique genes top 90: 298\nNumber of unique genes top 100: 333\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ANGEL1</td>\n      <td>CHCHD8</td>\n      <td>TULP2</td>\n      <td>NRTN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CBX2</td>\n      <td>ALDH1L1</td>\n      <td>HUWE1</td>\n      <td>GCK</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SLITRK3</td>\n      <td>PSMD4</td>\n      <td>LOC112714</td>\n      <td>CDC42EP3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>OSBPL5</td>\n      <td>C10orf137</td>\n      <td>THAP11</td>\n      <td>FLJ38288</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ING5</td>\n      <td>TFF1</td>\n      <td>CFHR1</td>\n      <td>PSMD4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PHB2</td>\n      <td>ZNRF2</td>\n      <td>HIST1H4B</td>\n      <td>USP20</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>KPNA6</td>\n      <td>KIAA1012</td>\n      <td>USP20</td>\n      <td>TULP2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>PAFAH2</td>\n      <td>NANP</td>\n      <td>IRS1</td>\n      <td>LGALS8</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>PSMD4</td>\n      <td>NGLY1</td>\n      <td>SPAG5</td>\n      <td>DCLRE1C</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>HES6</td>\n      <td>ICAM4</td>\n      <td>PSMD4</td>\n      <td>SLC25A12</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>ORF1-FL49</td>\n      <td>TSSK4</td>\n      <td>MGC13125</td>\n      <td>ATF3</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>SLITRK1</td>\n      <td>ANKMY2</td>\n      <td>DIABLO</td>\n      <td>FLJ20489</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>TULP2</td>\n      <td>SCAP2</td>\n      <td>CSTF2T</td>\n      <td>ZNRF2</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>STMN3</td>\n      <td>HNRPA3</td>\n      <td>MS4A10</td>\n      <td>MCFP</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>SRF</td>\n      <td>VNN2</td>\n      <td>CACNG4</td>\n      <td>PNRC1</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>AIM1L</td>\n      <td>HSPC268</td>\n      <td>NMD3</td>\n      <td>ALG5</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>PAN3</td>\n      <td>SPESP1</td>\n      <td>TRDMT1</td>\n      <td>PTPRU</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>ARMCX2</td>\n      <td>ANKMY1</td>\n      <td>PTDSS1</td>\n      <td>DIABLO</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>ZNF41</td>\n      <td>H3F3B</td>\n      <td>MAPK11</td>\n      <td>FLJ30294</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>B4GALT5</td>\n      <td>SFRS4</td>\n      <td>USP15</td>\n      <td>LRIG3</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_dict_default_macro_means --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 36\nNumber of unique genes top 20: 73\nNumber of unique genes top 30: 103\nNumber of unique genes top 40: 134\nNumber of unique genes top 50: 161\nNumber of unique genes top 60: 195\nNumber of unique genes top 70: 226\nNumber of unique genes top 80: 262\nNumber of unique genes top 90: 295\nNumber of unique genes top 100: 328\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ABCF3</td>\n      <td>HNRPA3</td>\n      <td>PTDSS1</td>\n      <td>CGNL1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PSMD4</td>\n      <td>SNORA4</td>\n      <td>CA2</td>\n      <td>GPR75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>TAS2R13</td>\n      <td>NANP</td>\n      <td>MAPK1</td>\n      <td>PNRC1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>HES6</td>\n      <td>PSMD4</td>\n      <td>TULP2</td>\n      <td>PSMD4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>VIM</td>\n      <td>ALDH1L1</td>\n      <td>LOC112714</td>\n      <td>RPRML</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>DNAJB11</td>\n      <td>C3orf35</td>\n      <td>FKSG52</td>\n      <td>RECQL4</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>AIM1L</td>\n      <td>UGT1A6</td>\n      <td>GYG1</td>\n      <td>TULP2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>PAN3</td>\n      <td>ZNF860</td>\n      <td>PSMD4</td>\n      <td>DCLRE1C</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>EZH1</td>\n      <td>NHLRC1</td>\n      <td>USP20</td>\n      <td>SLC22A11</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>LAIR2</td>\n      <td>CACNG4</td>\n      <td>MCART1</td>\n      <td>MGC12966</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>RN7SL738P</td>\n      <td>RNF208</td>\n      <td>RPP25</td>\n      <td>ZNF718</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>TMEFF2</td>\n      <td>ORC3L</td>\n      <td>HIST1H4B</td>\n      <td>POM121</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>ZKSCAN1</td>\n      <td>DDX48</td>\n      <td>CT64</td>\n      <td>DEGS2</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>C17orf39</td>\n      <td>MRPS17</td>\n      <td>IFT80</td>\n      <td>DEFB4</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>TULP2</td>\n      <td>SPAG5</td>\n      <td>PNCK</td>\n      <td>FLJ38288</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>BBS10</td>\n      <td>CDK2AP2</td>\n      <td>CBX2</td>\n      <td>C1orf63</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>DDT</td>\n      <td>CHCHD8</td>\n      <td>SLC35C1</td>\n      <td>FLJ13909</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>ZBTB8A</td>\n      <td>COG5</td>\n      <td>SPAG5</td>\n      <td>APEG1</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>PSMB9</td>\n      <td>ITGA9</td>\n      <td>C1orf63</td>\n      <td>C18orf1</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>MGC33486</td>\n      <td>SPESP1</td>\n      <td>FBXW10</td>\n      <td>SLC25A12</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_micro_mean_zero1 --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 36\nNumber of unique genes top 20: 70\nNumber of unique genes top 30: 99\nNumber of unique genes top 40: 121\nNumber of unique genes top 50: 152\nNumber of unique genes top 60: 181\nNumber of unique genes top 70: 210\nNumber of unique genes top 80: 237\nNumber of unique genes top 90: 270\nNumber of unique genes top 100: 300\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>PI4KII</td>\n      <td>SPAG5</td>\n      <td>TULP2</td>\n      <td>TULP2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SNORD51</td>\n      <td>SLC30A3</td>\n      <td>TSACC</td>\n      <td>ALDH1L1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MFSD9</td>\n      <td>PDE7B</td>\n      <td>CBX2</td>\n      <td>CBX2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>TSGA14</td>\n      <td>HNRPA3</td>\n      <td>HIST1H4B</td>\n      <td>DIRC2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SYF2</td>\n      <td>C1orf63</td>\n      <td>DPP6</td>\n      <td>STT3B</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PSMD4</td>\n      <td>LOC84661</td>\n      <td>MPPED2</td>\n      <td>IL1F8</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>PAN3</td>\n      <td>CBX2</td>\n      <td>PTMS</td>\n      <td>MDH1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>CEP250</td>\n      <td>AP1AR</td>\n      <td>USP20</td>\n      <td>TMLHE</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>USP40</td>\n      <td>SNORD38A</td>\n      <td>IGSF10</td>\n      <td>PSMD4</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>SPRR2F</td>\n      <td>SMC4</td>\n      <td>CACNG4</td>\n      <td>UGT1A9</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>WBSCR23</td>\n      <td>PSMD4</td>\n      <td>UGT1A6</td>\n      <td>MTFR1L</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>MAS1</td>\n      <td>MYEOV2</td>\n      <td>MIR3127</td>\n      <td>PNRC1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>DCLRE1C</td>\n      <td>cg00718513</td>\n      <td>PGBD3</td>\n      <td>SLC25A12</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>TULP2</td>\n      <td>OR2V1</td>\n      <td>USP17L25</td>\n      <td>ZBTB7B</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>PNLIPRP2</td>\n      <td>STMN3</td>\n      <td>RPS19BP1</td>\n      <td>CXorf22</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>DHH</td>\n      <td>HCRTR1</td>\n      <td>TRIB3</td>\n      <td>POM121</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>BTBD12</td>\n      <td>NANP</td>\n      <td>LYSMD1</td>\n      <td>EZH1</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>MROH2A</td>\n      <td>TULP2</td>\n      <td>SPAG5</td>\n      <td>LOC90355</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>FCGR1B</td>\n      <td>LOC112714</td>\n      <td>ANKRD34A</td>\n      <td>NOXA1</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>HIST1H4B</td>\n      <td>ALDH1L1</td>\n      <td>C6orf118</td>\n      <td>CGNL1</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_micro_mean_zero2 --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 36\nNumber of unique genes top 20: 70\nNumber of unique genes top 30: 101\nNumber of unique genes top 40: 128\nNumber of unique genes top 50: 159\nNumber of unique genes top 60: 189\nNumber of unique genes top 70: 215\nNumber of unique genes top 80: 244\nNumber of unique genes top 90: 272\nNumber of unique genes top 100: 301\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CBX2</td>\n      <td>MON1B</td>\n      <td>CGI-96</td>\n      <td>MLLT6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>C12orf4</td>\n      <td>CBX2</td>\n      <td>TULP2</td>\n      <td>USP20</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CACNA1D</td>\n      <td>MAZ</td>\n      <td>USP20</td>\n      <td>TRAF3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>C14orf29</td>\n      <td>CCL22</td>\n      <td>PI4KII</td>\n      <td>FLJ13909</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ORF1-FL49</td>\n      <td>GATAD2A</td>\n      <td>SERP1</td>\n      <td>TULP2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PSMD4</td>\n      <td>ALDH1L1</td>\n      <td>DHRS1</td>\n      <td>P11</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>EDG3</td>\n      <td>TPMT</td>\n      <td>HIST1H4B</td>\n      <td>APS</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>DIABLO</td>\n      <td>NHLRC1</td>\n      <td>ARD1A</td>\n      <td>NANP</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>PAN3</td>\n      <td>APOLD1</td>\n      <td>SNRPB</td>\n      <td>MAPK8IP1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>GATAD2A</td>\n      <td>ZNF180</td>\n      <td>PAGE4</td>\n      <td>DNCL1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>PCF11</td>\n      <td>ZNRF2</td>\n      <td>CMTM4</td>\n      <td>DCLRE1C</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>PHB2</td>\n      <td>C6orf118</td>\n      <td>C4orf16</td>\n      <td>NSBP1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>SF1</td>\n      <td>C10orf137</td>\n      <td>CBX2</td>\n      <td>PSMD4</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>TULP2</td>\n      <td>PPM1M</td>\n      <td>SERPINB6</td>\n      <td>CBX2</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>HLA-DRB5</td>\n      <td>FLT1</td>\n      <td>CEP250</td>\n      <td>ACTG2</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>NPEPPS</td>\n      <td>PSMD4</td>\n      <td>ZNF585A</td>\n      <td>LOC90355</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>hCG_40738</td>\n      <td>SPAG5</td>\n      <td>DPF2</td>\n      <td>ALDH1L1</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>FOXJ2</td>\n      <td>HNRPA3</td>\n      <td>PTHR1</td>\n      <td>PTDSS1</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>PCTP</td>\n      <td>HSD11B2</td>\n      <td>CACNG4</td>\n      <td>ZNF449</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>SEP15</td>\n      <td>MAPK1</td>\n      <td>ZNF140</td>\n      <td>SERHL2</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_micro_mean_zero3 --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 39\nNumber of unique genes top 20: 78\nNumber of unique genes top 30: 117\nNumber of unique genes top 40: 153\nNumber of unique genes top 50: 189\nNumber of unique genes top 60: 219\nNumber of unique genes top 70: 255\nNumber of unique genes top 80: 291\nNumber of unique genes top 90: 324\nNumber of unique genes top 100: 360\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>MIR3140</td>\n      <td>CD151</td>\n      <td>SMEK1</td>\n      <td>MFI2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>TPM4</td>\n      <td>C4orf30</td>\n      <td>C4orf16</td>\n      <td>CMKLR1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PRORSD1P</td>\n      <td>SLC25A12</td>\n      <td>P2RY5</td>\n      <td>POM121</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FHDC1</td>\n      <td>MIR15B</td>\n      <td>SPAG5</td>\n      <td>ZNF239</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>UQCC</td>\n      <td>DCDC2B</td>\n      <td>RNF170</td>\n      <td>TARBP2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>BOLA3</td>\n      <td>SIGLEC5</td>\n      <td>FAM72B</td>\n      <td>CRH</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CRELD1</td>\n      <td>MAPK1</td>\n      <td>MPHOSPH10</td>\n      <td>GKN2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>ZNF236</td>\n      <td>RN7SL470P</td>\n      <td>KCNJ2</td>\n      <td>KHSRP</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>YEATS2</td>\n      <td>UQCC</td>\n      <td>RN7SKP164</td>\n      <td>FIG4</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>BACH2</td>\n      <td>SPOCD1</td>\n      <td>DUSP28</td>\n      <td>BCL11A</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>RNA5SP157</td>\n      <td>TAF12</td>\n      <td>RORC</td>\n      <td>COPE</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>TRANK1</td>\n      <td>BXDC5</td>\n      <td>C1orf217</td>\n      <td>LGALS8</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>FUZ</td>\n      <td>REV1</td>\n      <td>CLIP1</td>\n      <td>RN7SL691P</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>DCXR</td>\n      <td>PSMD13</td>\n      <td>RECQL4</td>\n      <td>MIR4255</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>INPP5F</td>\n      <td>MIR28</td>\n      <td>RNF208</td>\n      <td>snoZ247</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>MRPL47</td>\n      <td>RNA5SP157</td>\n      <td>PDAP1</td>\n      <td>SH2B1</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>HIST2H2BE</td>\n      <td>NMS</td>\n      <td>FN3KRP</td>\n      <td>SNORA81</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>IAPP</td>\n      <td>KIF6</td>\n      <td>OTOL1</td>\n      <td>RN7SL276P</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>SNORA70B</td>\n      <td>SLTM</td>\n      <td>MCFD2</td>\n      <td>SMIM14</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>CCNO</td>\n      <td>GPR19</td>\n      <td>TBCD</td>\n      <td>CHMP3</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_macro_mean_zero1 --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 38\nNumber of unique genes top 20: 69\nNumber of unique genes top 30: 100\nNumber of unique genes top 40: 128\nNumber of unique genes top 50: 150\nNumber of unique genes top 60: 183\nNumber of unique genes top 70: 211\nNumber of unique genes top 80: 238\nNumber of unique genes top 90: 268\nNumber of unique genes top 100: 296\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>COPS7B</td>\n      <td>STMN3</td>\n      <td>HIST1H4B</td>\n      <td>TULP2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>HIST2H2BF</td>\n      <td>SPAG5</td>\n      <td>TULP2</td>\n      <td>CBX2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PSMD4</td>\n      <td>CBX2</td>\n      <td>USP20</td>\n      <td>SLC5A7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>UBXN11</td>\n      <td>SERP1</td>\n      <td>snoZ247</td>\n      <td>FREQ</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ZNF449</td>\n      <td>HNRPA3</td>\n      <td>ZNF286</td>\n      <td>LOC405753</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PNLIPRP2</td>\n      <td>LCORL</td>\n      <td>TBC1D3C</td>\n      <td>DIABLO</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>TFCP2</td>\n      <td>RNA5SP157</td>\n      <td>RNF212</td>\n      <td>STT3B</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>ALDH1L1</td>\n      <td>APEG1</td>\n      <td>C18orf1</td>\n      <td>SYCP2</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>PAN3</td>\n      <td>C19orf37</td>\n      <td>PI4KII</td>\n      <td>SLC25A12</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>SMBP</td>\n      <td>DGCR6L</td>\n      <td>SLC1A5</td>\n      <td>POM121</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>RSPO3</td>\n      <td>C14orf152</td>\n      <td>EZH1</td>\n      <td>PSMD4</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>FLJ37538</td>\n      <td>MRPL30</td>\n      <td>SLC39A3</td>\n      <td>IL1F8</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>MDH1</td>\n      <td>PSMD4</td>\n      <td>EXO1</td>\n      <td>EZH1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>CBX2</td>\n      <td>UXS1</td>\n      <td>RPS19BP1</td>\n      <td>LOC90355</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>ACR</td>\n      <td>HCRTR1</td>\n      <td>CACNG4</td>\n      <td>PNRC1</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>MAS1</td>\n      <td>TULP2</td>\n      <td>PSG3</td>\n      <td>MYADM</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>TULP2</td>\n      <td>LOC84661</td>\n      <td>LRP16</td>\n      <td>WBSCR23</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>SERP1</td>\n      <td>LOC112714</td>\n      <td>SPAG5</td>\n      <td>TMEFF2</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>HRB2</td>\n      <td>GHRLOS</td>\n      <td>CBX2</td>\n      <td>STK17B</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>TRIB3</td>\n      <td>ABCA11P</td>\n      <td>HDC</td>\n      <td>ZCCHC4</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_macro_mean_zero2 --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 36\nNumber of unique genes top 20: 68\nNumber of unique genes top 30: 96\nNumber of unique genes top 40: 126\nNumber of unique genes top 50: 154\nNumber of unique genes top 60: 180\nNumber of unique genes top 70: 212\nNumber of unique genes top 80: 238\nNumber of unique genes top 90: 265\nNumber of unique genes top 100: 290\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>MLLT6</td>\n      <td>UBE2J1</td>\n      <td>BRWD3</td>\n      <td>SSSCA1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PAN3</td>\n      <td>SERP1</td>\n      <td>TULP2</td>\n      <td>CDKL5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MCART1</td>\n      <td>FLJ42957</td>\n      <td>FLJ37357</td>\n      <td>NANP</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NRTN</td>\n      <td>LOC84661</td>\n      <td>PGF</td>\n      <td>TULP2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>GATAD2A</td>\n      <td>CHCHD8</td>\n      <td>DPEP3</td>\n      <td>GPR18</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>SLC6A4</td>\n      <td>TGFB2</td>\n      <td>PGBD3</td>\n      <td>TRAF3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>TULP2</td>\n      <td>PLLP</td>\n      <td>ZNF585A</td>\n      <td>DCLRE1C</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>PSMD4</td>\n      <td>HDAC11</td>\n      <td>PAGE4</td>\n      <td>MLLT6</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>SERP1</td>\n      <td>ARNTL</td>\n      <td>STX11</td>\n      <td>PTDSS1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>FSTL1</td>\n      <td>WBSCR27</td>\n      <td>FBXO27</td>\n      <td>CAP2</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>SF1</td>\n      <td>STMN3</td>\n      <td>TACC3</td>\n      <td>DNCL1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>FLJ38288</td>\n      <td>SMPDL3A</td>\n      <td>TRAF3</td>\n      <td>EZH1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>CLDN17</td>\n      <td>HNRPA3</td>\n      <td>REV1</td>\n      <td>PSMD4</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>ZNF585A</td>\n      <td>ZNRF2</td>\n      <td>HIST1H4B</td>\n      <td>FLJ13909</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>IL13RA1</td>\n      <td>CBX2</td>\n      <td>USP20</td>\n      <td>LOC90355</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>KIAA1012</td>\n      <td>CHST12</td>\n      <td>C18orf1</td>\n      <td>SLC35A1</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>H2AFB3</td>\n      <td>SPAG5</td>\n      <td>EZH1</td>\n      <td>USP20</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>ALDH1L1</td>\n      <td>RPL7</td>\n      <td>PSMD4</td>\n      <td>POM121</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>RGL3</td>\n      <td>TSCOT</td>\n      <td>HSPA1A</td>\n      <td>LOC51136</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>CBX2</td>\n      <td>KIAA0195</td>\n      <td>CBX2</td>\n      <td>AMDHD1</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n-------------------- baseline_ig_macro_mean_zero3 --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\n/kaggle/working/models/5\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/5/ calculated.\n\nNumber of unique genes top 10: 40\nNumber of unique genes top 20: 80\nNumber of unique genes top 30: 115\nNumber of unique genes top 40: 154\nNumber of unique genes top 50: 190\nNumber of unique genes top 60: 221\nNumber of unique genes top 70: 256\nNumber of unique genes top 80: 291\nNumber of unique genes top 90: 324\nNumber of unique genes top 100: 355\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>KIAA1012</td>\n      <td>GALNT15</td>\n      <td>SPAG5</td>\n      <td>S100A14</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CAP2</td>\n      <td>HNRPA3</td>\n      <td>C1orf217</td>\n      <td>CHCHD8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C6orf211</td>\n      <td>NMS</td>\n      <td>SMEK1</td>\n      <td>RNA5SP159</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>BBS10</td>\n      <td>DCDC2B</td>\n      <td>OSBPL10</td>\n      <td>SPDL1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PAQR7</td>\n      <td>C11orf24</td>\n      <td>F2R</td>\n      <td>RTCD1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>BOLA3</td>\n      <td>HGSNAT</td>\n      <td>SLC25A38</td>\n      <td>CHMP3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>FNBP1</td>\n      <td>NT5C</td>\n      <td>RGL3</td>\n      <td>TFDP2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>ZNF552</td>\n      <td>CNOT1</td>\n      <td>AHNAK</td>\n      <td>NDUFAB1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>YEATS2</td>\n      <td>MRFAP1L1</td>\n      <td>C17orf39</td>\n      <td>MON1B</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>FLJ20489</td>\n      <td>ETHE1</td>\n      <td>CLUAP1</td>\n      <td>TRABD2A</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>STX4</td>\n      <td>ITGA9</td>\n      <td>CD180</td>\n      <td>CLHC1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>NEU1</td>\n      <td>COQ3</td>\n      <td>TPMT</td>\n      <td>COPE</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>SNORA12</td>\n      <td>TPCN1</td>\n      <td>RN7SKP66</td>\n      <td>CRH</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>SLC16A3</td>\n      <td>EFEMP1</td>\n      <td>PRPF38B</td>\n      <td>PISD</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>C17orf57</td>\n      <td>SMEK2</td>\n      <td>SPP2</td>\n      <td>SPTSSB</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>PCF11</td>\n      <td>IL18R1</td>\n      <td>ATF2</td>\n      <td>APOL2</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>NME4</td>\n      <td>TSSK1B</td>\n      <td>DUSP28</td>\n      <td>AVIL</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>RANGAP1</td>\n      <td>KIF6</td>\n      <td>RUNDC3B</td>\n      <td>snoZ247</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>FAM82C</td>\n      <td>TMEM181</td>\n      <td>RNF208</td>\n      <td>POM121</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>LCMT2</td>\n      <td>EIF1AX</td>\n      <td>C4orf16</td>\n      <td>GKN2</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 2.4. New code","metadata":{}},{"cell_type":"code","source":"num_models=5\nmodel_folder = '/kaggle/working/models'\nbiomarkers_folder = '/kaggle/working/biomarkers/' + 'TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler'\nbiomarker_file_name = f'mogonet_full_top_biomarkers_sorted_desc_score_{num_models}models.csv'\npostfix_tr = '_tr'\npostfix_te = '_val'\ntopn = 30\n\n!python '/kaggle/input/{dataset_name}/main_biomarker.py' '{data_folder}' '{model_folder}' '{view_list}' '{num_models}' '{postfix_tr}' '{postfix_te}' '{biomarkers_folder}' '{biomarker_file_name}' '{topn}'","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-05-25T16:21:10.840709Z","iopub.execute_input":"2024-05-25T16:21:10.840983Z","iopub.status.idle":"2024-05-25T16:28:54.127275Z","shell.execute_reply.started":"2024-05-25T16:21:10.840955Z","shell.execute_reply":"2024-05-25T16:28:54.126348Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Rank\tFeature name\n1\tSERPINB8\n2\tRGS1\n3\tCD9\n4\tRN7SL788P\n5\tUBXD3\n6\tCPS1\n7\tACADL\n8\tSCFD2\n9\tERBB4\n10\tU3\n11\tCDK5R2\n12\tCYP27A1\n13\tRN7SKP38\n14\tANXA4\n15\tsnoU13\n16\tKANSL1L\n17\tSTK36\n18\tWNT10A\n19\tZNF142\n20\tGMCL1\n21\tTTLL4\n22\tBCS1L\n23\tRNF25\n24\tPLCD4\n25\tWNT6\n26\tBTG2\n27\tUSP37\n28\tLANCL1\n29\tPRKAG3\n30\tAAK1\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# MODULE 3: PHASE 3\n## 3.1. Check with other genes","metadata":{}},{"cell_type":"code","source":"ha_biomarker_lst=['CASP3', 'TNF', 'IL6', 'AKT1', 'TP53', 'BAX', 'BCL2', 'PARP1', 'CCND1', 'CDKN1A', \n                  'RELA', 'HMOX1', 'H2AX', 'ABCB1', 'NFKBIA', 'BCL2L1', 'SOD2', 'CCL2', 'COL1A1', 'GSTP1']\n\ndef print_genes_ovarlap(df, top_gene, compared_lst):\n    # Flatten the list of lists into a single list\n    tmp = df.iloc[:top_gene,:].values.flatten()\n    \n    # Find the common biomarkers\n    com_biomarkers = np.unique([bio for bio in tmp if bio in compared_lst])\n    \n    # Print the results\n    print(f\"Found {len(com_biomarkers)} in top {len(tmp)} genes\", end=\"\")\n    if len(com_biomarkers) > 0:\n        print(\": \", com_biomarkers, end=\"\")\n    print('\\n', '-' * 70)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-25T16:28:54.128820Z","iopub.execute_input":"2024-05-25T16:28:54.129129Z","iopub.status.idle":"2024-05-25T16:28:54.136251Z","shell.execute_reply.started":"2024-05-25T16:28:54.129096Z","shell.execute_reply":"2024-05-25T16:28:54.135356Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Old code overlap:\n\nfor ith_baseline in range(num_baselines):\n    print(all_baselines_name[ith_baseline])\n    matrix_top_threshold = matrix_top_thres_lst[ith_baseline]\n#     print(matrix_top_threshold.head())\n    print_genes_ovarlap(matrix_top_threshold, 20, ha_biomarker_lst)\n    print_genes_ovarlap(matrix_top_threshold, 30, ha_biomarker_lst)\n    print_genes_ovarlap(matrix_top_threshold, 100, ha_biomarker_lst)\n    print('*' * 70)\n    print('\\n\\n')","metadata":{"execution":{"iopub.status.busy":"2024-05-25T16:28:54.137697Z","iopub.execute_input":"2024-05-25T16:28:54.138061Z","iopub.status.idle":"2024-05-25T16:28:54.189041Z","shell.execute_reply.started":"2024-05-25T16:28:54.138026Z","shell.execute_reply":"2024-05-25T16:28:54.188347Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"baseline_ig_zeros\nFound 1 in top 80 genes:  ['GSTP1']\n ----------------------------------------------------------------------\nFound 1 in top 120 genes:  ['GSTP1']\n ----------------------------------------------------------------------\nFound 1 in top 400 genes:  ['GSTP1']\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_micro_means\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 0 in top 400 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_macro_means\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 1 in top 400 genes:  ['CDKN1A']\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_dict_default_micro_means\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 0 in top 400 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_dict_default_macro_means\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 0 in top 400 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_micro_mean_zero1\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 0 in top 400 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_micro_mean_zero2\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 1 in top 400 genes:  ['GSTP1']\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_micro_mean_zero3\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 0 in top 400 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_macro_mean_zero1\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 0 in top 400 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_macro_mean_zero2\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 0 in top 400 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\nbaseline_ig_macro_mean_zero3\nFound 0 in top 80 genes\n ----------------------------------------------------------------------\nFound 0 in top 120 genes\n ----------------------------------------------------------------------\nFound 0 in top 400 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# New code overlap\nbiomarker_score=pd.read_csv(f\"{biomarkers_folder}/{biomarker_file_name}\")\nbiomarker=biomarker_score[[\"feat_name\"]]\nprint_genes_ovarlap(biomarker, 100, ha_biomarker_lst)\nprint_genes_ovarlap(biomarker, 300, ha_biomarker_lst)\nprint_genes_ovarlap(biomarker, 400, ha_biomarker_lst)\nprint_genes_ovarlap(biomarker, 1000, ha_biomarker_lst)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T16:28:54.190140Z","iopub.execute_input":"2024-05-25T16:28:54.190530Z","iopub.status.idle":"2024-05-25T16:28:54.214236Z","shell.execute_reply.started":"2024-05-25T16:28:54.190494Z","shell.execute_reply":"2024-05-25T16:28:54.213574Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Found 0 in top 100 genes\n ----------------------------------------------------------------------\nFound 1 in top 300 genes:  ['CCL2']\n ----------------------------------------------------------------------\nFound 1 in top 400 genes:  ['CCL2']\n ----------------------------------------------------------------------\nFound 3 in top 1000 genes:  ['BCL2' 'CCL2' 'HMOX1']\n ----------------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 3.2. TEST WITH CLASSIC ML ALGO\n- Extracting genes with top scores from calculated attr scores of genes","metadata":{}},{"cell_type":"code","source":"from sklearn import svm\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import balanced_accuracy_score, accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom statistics import stdev\nfrom sklearn.model_selection import cross_val_score\n\ndef phase3(matrix_top_threshold, indices_matrix_top_threshold, data_folder):\n    for idx_model in idx_list:\n        cur_data_folder = f\"{data_folder}/{idx_model}/\"\n        print(f\"Fold {idx_model}:\")\n        #--------------------------------------------------------------------------------------------\n        list_genes = matrix_top_threshold.stack().to_frame().reset_index(drop=True)\n        idx_genes = indices_matrix_top_threshold.stack().to_frame().reset_index(drop=True)\n\n        # Convert 1st (and only) column of idx_genes into a Python list\n        column_to_convert = idx_genes.iloc[:, 0]\n        list_from_column = column_to_convert.tolist()\n        sorted_idx_genes = sorted(list_from_column)\n        idx_genes = sorted_idx_genes\n        len_each_omic = []\n        for tmp in _data_list:\n            len_each_omic.append(tmp.shape[1])\n\n        idx_each_omic = []\n        tmp = len_each_omic[0]\n        tmp_idx = 0\n        lower_bound = 0\n        for data in _data_list:\n            idx_an_omic = [values - lower_bound for values in idx_genes if values < tmp and values >= lower_bound]\n        #     print(idx_genes)\n        #     print(tmp)\n        #     print(lower_bound)\n            idx_each_omic.append(idx_an_omic)\n            lower_bound += len_each_omic[tmp_idx]\n            tmp_idx += 1\n            if tmp_idx < len(len_each_omic):\n                tmp += len_each_omic[tmp_idx]\n\n        # concat data\n        data_concat = []\n        for i, tmp in enumerate(idx_each_omic):\n            train_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_tr.csv\"), delimiter=',', header=None)\n            selected_columns = train_tmp.iloc[:, tmp]\n            data_concat.append(selected_columns.values)\n\n        X_train = np.hstack(data_concat)\n        y_train = pd.read_csv(os.path.join(cur_data_folder,\"labels_tr.csv\"), header=None) \n        y_train = y_train[0].tolist()\n\n        # Just to check and debug\n        print(X_train.shape)\n        # print(len(labels_tr))\n\n        #--------------------------------------------------------------------------------------------\n        data_test_concat = []\n        for i,tmp in enumerate(idx_each_omic):\n            test_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_te.csv\"), delimiter=',', header=None)\n            selected_columns = test_tmp.iloc[:, tmp]\n            data_test_concat.append(selected_columns.values)\n\n        X_test = np.hstack(data_test_concat)\n        y_test = pd.read_csv(os.path.join(cur_data_folder,\"labels_te.csv\"), header=None) \n        y_test = labels_te.tolist()\n\n        # Just to check and debug\n        print(X_test.shape)\n        # print(len(labels_te))\n\n\n    # At this moment;\n\n    # Phase 1: model => use train data\n    # Phase 2: xAI to find MOGONET => many options:\n    # Use test data: the same with MOGONET\n    # Use dev + train data: Mr.Hoang recommends to do this\n    # Use train data:\n    # Phase 3: many options too => Whatever thay are; please remember: diving one test to be fixed and train data: KFold on that train data\n    # Use train data - test data\n    # Use train data - dev to tune - test data (KFold)\n\n        #--------------------------------------------------------------------------------------------\n        model = svm.SVC() \n        params_grid = {'C': [0.1, 1, 10, 100, 1000],  \n                      'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n                      'kernel': ['rbf']}\n        skf = StratifiedKFold(n_splits=5)\n\n        #---------------------Step 1: Tuning the hyperparas -----------------------------------------------------------------------\n        svm_model = GridSearchCV(model, param_grid=params_grid, cv=skf).fit(X_train, y_train)\n\n        # Not sure about this line\n        # svm.fit(X_train, Y_train)\n        print('Best parameters:', svm_model.best_params_)\n        print('Best score:', svm_model.best_score_)\n\n\n        #---------------------Step 2: Check the results of tuning -----------------------------------------------------------------------\n        score = cross_val_score(svm_model, X_train, y_train, cv=skf)\n        svm_cv_score = score.mean()\n        svm_cv_stdev = stdev(score)\n        print('Cross Validation Recall scores are: {}'.format(score))\n        print('Average Cross Validation Recall score: ', svm_cv_score)\n        print('Cross Validation Recall standard deviation: ', svm_cv_stdev)\n\n        #---------------------Step 3: Try the estimated models with test set -----------------------------------------------------------------------\n        y_pred = svm_model.predict(X_test)\n\n        svm_Recall = recall_score(y_test, y_pred, average='weighted')\n        svm_Precision = precision_score(y_test, y_pred, average='weighted', zero_division=1)\n        svm_f1 = f1_score(y_test, y_pred, average='weighted')\n        svm_accuracy = accuracy_score(y_test, y_pred)\n\n        print(svm_Recall)\n        print(svm_Precision)\n        print(svm_f1)\n        print(svm_accuracy)\n        print('-' * 50)\n        print()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T16:28:54.215607Z","iopub.execute_input":"2024-05-25T16:28:54.215959Z","iopub.status.idle":"2024-05-25T16:28:54.327612Z","shell.execute_reply.started":"2024-05-25T16:28:54.215923Z","shell.execute_reply":"2024-05-25T16:28:54.326739Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"### 3.2.1. Phase 3 for old code","metadata":{}},{"cell_type":"code","source":"cur_model_folder = f'/kaggle/working/models'\nprint(cur_model_folder)\n\nfor ith_baseline in range(num_baselines):\n    print(all_baselines_name[ith_baseline])\n    phase3(matrix_top_thres_lst[ith_baseline], indices_matrix_top_thres_lst[ith_baseline], \n           data_folder)\n    print('*' * 70)\n    print('\\n\\n')","metadata":{"execution":{"iopub.status.busy":"2024-05-25T16:28:54.328663Z","iopub.execute_input":"2024-05-25T16:28:54.328910Z","iopub.status.idle":"2024-05-25T16:36:25.232540Z","shell.execute_reply.started":"2024-05-25T16:28:54.328886Z","shell.execute_reply":"2024-05-25T16:36:25.231647Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"/kaggle/working/models\nbaseline_ig_zeros\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_micro_means\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_macro_means\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_dict_default_micro_means\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_dict_default_macro_means\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_micro_mean_zero1\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_micro_mean_zero2\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_micro_mean_zero3\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_macro_mean_zero1\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_macro_mean_zero2\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\nbaseline_ig_macro_mean_zero3\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.33840682788051213\nCross Validation Recall scores are: [0.26315789 0.21052632 0.34210526 0.34210526 0.2972973 ]\nAverage Cross Validation Recall score:  0.2910384068278805\nCross Validation Recall standard deviation:  0.05593375791640509\n0.275\n0.2919093406593407\n0.2796666666666666\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nBest score: 0.38634423897581793\nCross Validation Recall scores are: [0.34210526 0.31578947 0.34210526 0.36842105 0.40540541]\nAverage Cross Validation Recall score:  0.3547652916073969\nCross Validation Recall standard deviation:  0.03387686510766089\n0.325\n0.4875\n0.26230769230769235\n0.325\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.3388335704125178\nCross Validation Recall scores are: [0.28947368 0.23684211 0.26315789 0.28947368 0.2972973 ]\nAverage Cross Validation Recall score:  0.27524893314367\nCross Validation Recall standard deviation:  0.025060402457251604\n0.25\n0.5648337595907928\n0.17892857142857146\n0.25\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 1, 'kernel': 'rbf'}\nBest score: 0.34381223328591753\nCross Validation Recall scores are: [0.31578947 0.39473684 0.31578947 0.26315789 0.32432432]\nAverage Cross Validation Recall score:  0.3227596017069701\nCross Validation Recall standard deviation:  0.04699122347652605\n0.175\n0.1406926406926407\n0.1479479949874687\n0.175\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.34409672830725463\nCross Validation Recall scores are: [0.31578947 0.36842105 0.21052632 0.31578947 0.37837838]\nAverage Cross Validation Recall score:  0.3177809388335704\nCross Validation Recall standard deviation:  0.06661072893324961\n0.325\n0.4398076923076923\n0.2667919799498747\n0.325\n--------------------------------------------------\n\n**********************************************************************\n\n\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### 3.2.2. Phase 3 for new code","metadata":{}},{"cell_type":"code","source":"cur_model_folder = f'/kaggle/working/models'\nprint(cur_model_folder)\n\ntop_genes = biomarker_score[[\"feat_name\"]].iloc[:400,:]\ntop_scores = biomarker_score[[\"imp\"]].iloc[:400,:]\nphase3(top_genes, top_scores, data_folder)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T16:36:25.233783Z","iopub.execute_input":"2024-05-25T16:36:25.234068Z","iopub.status.idle":"2024-05-25T16:36:57.541997Z","shell.execute_reply.started":"2024-05-25T16:36:25.234038Z","shell.execute_reply":"2024-05-25T16:36:57.540846Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"/kaggle/working/models\nFold 1:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 1000, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.5829302987197724\nCross Validation Recall scores are: [0.47368421 0.57894737 0.52631579 0.44736842 0.62162162]\nAverage Cross Validation Recall score:  0.5295874822190612\nCross Validation Recall standard deviation:  0.07211541957152026\n0.275\n0.26904761904761904\n0.26897220426632196\n0.275\n--------------------------------------------------\n\nFold 2:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 1000, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.6137980085348507\nCross Validation Recall scores are: [0.5        0.65789474 0.60526316 0.71052632 0.56756757]\nAverage Cross Validation Recall score:  0.6082503556187767\nCross Validation Recall standard deviation:  0.08109730066614257\n0.3\n0.31298076923076923\n0.30485024154589374\n0.3\n--------------------------------------------------\n\nFold 3:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.6243243243243243\nCross Validation Recall scores are: [0.63157895 0.60526316 0.63157895 0.63157895 0.54054054]\nAverage Cross Validation Recall score:  0.6081081081081081\nCross Validation Recall standard deviation:  0.03945285419163202\n0.2\n0.12371541501976284\n0.15047619047619049\n0.2\n--------------------------------------------------\n\nFold 4:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\nBest score: 0.6240398293029872\nCross Validation Recall scores are: [0.52631579 0.68421053 0.63157895 0.71052632 0.43243243]\nAverage Cross Validation Recall score:  0.5970128022759601\nCross Validation Recall standard deviation:  0.1159400113975536\n0.35\n0.3604166666666667\n0.33705882352941174\n0.35\n--------------------------------------------------\n\nFold 5:\n(189, 400)\n(40, 400)\nBest parameters: {'C': 100, 'gamma': 0.001, 'kernel': 'rbf'}\nBest score: 0.5445234708392603\nCross Validation Recall scores are: [0.47368421 0.63157895 0.44736842 0.71052632 0.45945946]\nAverage Cross Validation Recall score:  0.5445234708392603\nCross Validation Recall standard deviation:  0.11919395020095834\n0.65\n0.6389705882352941\n0.6207854406130269\n0.65\n--------------------------------------------------\n\n","output_type":"stream"}]}]}