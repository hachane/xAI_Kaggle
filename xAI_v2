{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8523489,"sourceType":"datasetVersion","datasetId":5027954},{"sourceId":8554869,"sourceType":"datasetVersion","datasetId":5065871,"isSourceIdPinned":true}],"dockerImageVersionId":30097,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# MODULE 1: TRAIN PHASE 1\n## 1.1. Train phase 1","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:41.399184Z","iopub.execute_input":"2024-05-31T15:29:41.399534Z","iopub.status.idle":"2024-05-31T15:29:41.403263Z","shell.execute_reply.started":"2024-05-31T15:29:41.399447Z","shell.execute_reply":"2024-05-31T15:29:41.402353Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import torch\nimport numpy as np\nimport os\nimport pandas as pd\nfrom IPython.display import display, HTML\ncuda = True if torch.cuda.is_available() else False\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f'cuda: {cuda}')\n!pip install watermark --quiet\n%load_ext watermark\n%watermark -a 'Le Hoang' -u -d -v -p torch,numpy","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:41.405143Z","iopub.execute_input":"2024-05-31T15:29:41.405500Z","iopub.status.idle":"2024-05-31T15:29:51.038515Z","shell.execute_reply.started":"2024-05-31T15:29:41.405464Z","shell.execute_reply":"2024-05-31T15:29:51.037648Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"cuda: True\nAuthor: Le Hoang\n\nLast updated: 2024-05-31\n\nPython implementation: CPython\nPython version       : 3.7.10\nIPython version      : 7.22.0\n\ntorch: 1.7.0\nnumpy: 1.19.5\n\n","output_type":"stream"}]},{"cell_type":"code","source":"bool_tuning = False","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:51.040995Z","iopub.execute_input":"2024-05-31T15:29:51.041295Z","iopub.status.idle":"2024-05-31T15:29:51.045272Z","shell.execute_reply.started":"2024-05-31T15:29:51.041261Z","shell.execute_reply":"2024-05-31T15:29:51.044233Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Subtypes\nLABEL_MAPPING_FULL_NAME = {0: 'Classical',\n1: 'Neural',\n2: 'Proneural',\n3: 'Mesenchymal'}.values()\n\nLABEL_MAPPING_NAME = {0: 'Classical',\n1: 'Neural',\n2: 'Proneural',\n3: 'Mesenchymal'}.values()\n\n# LABEL_MAPPING_FULL_NAME = {0: 'Normal-like',\n# 1: 'Basal-like',\n# 2: 'HER2-enriched',\n# 3: 'Luminal A',\n# 4: 'Luminal B'}.values()\n\n# LABEL_MAPPING_NAME = {0: 'Normal', # Normal-like\n# 1: 'Basal', # Basal-like\n# 2: 'HER2', # HER2-enriched\n# 3: 'LumA', # Luminal A\n# 4: 'LumB'}.values() # Luminal B","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:51.046590Z","iopub.execute_input":"2024-05-31T15:29:51.046913Z","iopub.status.idle":"2024-05-31T15:29:51.055187Z","shell.execute_reply.started":"2024-05-31T15:29:51.046885Z","shell.execute_reply":"2024-05-31T15:29:51.054438Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Config\nrseed = 42\n\npostfix_tr = '_tr'\npostfix_te = '_val'\n\ndataset_name = 'tcga-gbm-methxgexcnv-2000-3-omics'\nidx_list = list(range(1,5))\ndata_folder = f'/kaggle/input/{dataset_name}/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler'\nmodel_folder = '/kaggle/working/models'\ntrain_file = f'/kaggle/input/{dataset_name}/main_mogonet.py'\nview_list = [1,2,3]\n\n# Hyperparameters\nnum_epoch_pretrain = 869\nnum_epoch  = 1234\nlr_e_pretrain = 6.828749711329395e-05\nlr_e = 6.389593210590946e-05\nlr_c = 0.0008848039467866624\ndim_he_list=[357, 357, 185]\npatience=185\n\nbool_using_early_stopping = True\nverbose = False\nprint_hyper = False\nRun_no_IG = False\n\nmodel_dict=None\n\nfor fold_id in [1]:\n    display(HTML(f'<h2>idx data: {fold_id}</h2>'))\n    tmp = list(LABEL_MAPPING_FULL_NAME)\n    label_files = ['tr', 'te', 'val']\n    dict = {\n        'tr': 'Train set',\n        'te': 'Test set',\n        'val': 'Validation set'\n    }\n    \n    display(HTML('<div style=\"display: flex;\">'))\n    \n    for label_file in label_files:\n#         print(dict[label_file])\n        df = pd.read_csv(f'{data_folder}/{fold_id}/labels_{label_file}.csv', header=None, names=['featname'])\n        feature_counts = df['featname'].value_counts().sort_index()\n        \n        \n        # Create a div for each set of tables\n        display(HTML('<div style=\"margin-right: 20px;\">'))\n        display(HTML(f'<h3>{dict[label_file]}</h3>'))\n                \n        # Create an HTML table for the feature counts\n        html_table = '<table><tr><th>Label</th><th>Count</th></tr>'\n        for feature, count in feature_counts.items():\n            html_table += f'<tr><td>{tmp[feature]}</td><td>{count}</td></tr>'\n        html_table += '</table>'\n\n        # Display the HTML table\n        display(HTML(html_table))\n        display(HTML('</div>'))\n    display(HTML('</div>'))\n    print('\\n', '*'*100)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:51.056230Z","iopub.execute_input":"2024-05-31T15:29:51.056532Z","iopub.status.idle":"2024-05-31T15:29:51.129839Z","shell.execute_reply.started":"2024-05-31T15:29:51.056506Z","shell.execute_reply":"2024-05-31T15:29:51.129045Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<h2>idx data: 1</h2>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<div style=\"display: flex;\">"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<div style=\"margin-right: 20px;\">"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<h3>Train set</h3>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table><tr><th>Label</th><th>Count</th></tr><tr><td>Classical</td><td>45</td></tr><tr><td>Neural</td><td>51</td></tr><tr><td>Proneural</td><td>30</td></tr><tr><td>Mesenchymal</td><td>45</td></tr></table>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<div style=\"margin-right: 20px;\">"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<h3>Test set</h3>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table><tr><th>Label</th><th>Count</th></tr><tr><td>Classical</td><td>11</td></tr><tr><td>Neural</td><td>12</td></tr><tr><td>Proneural</td><td>7</td></tr><tr><td>Mesenchymal</td><td>11</td></tr></table>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<div style=\"margin-right: 20px;\">"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<h3>Validation set</h3>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table><tr><th>Label</th><th>Count</th></tr><tr><td>Classical</td><td>15</td></tr><tr><td>Neural</td><td>18</td></tr><tr><td>Proneural</td><td>9</td></tr><tr><td>Mesenchymal</td><td>16</td></tr></table>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"</div>"},"metadata":{}},{"name":"stdout","text":"\n ****************************************************************************************************\n","output_type":"stream"}]},{"cell_type":"code","source":"import sys\nsys.path.append(f'/kaggle/input/{dataset_name}/')\nprint(sys.path)\n\nfrom models import init_model_dict\nfrom utils import load_model_dict\nfrom train_test import prepare_trte_data, gen_trte_adj_mat, test_epoch\n\nfrom train_test import train_test\nfrom train_test import gen_trte_adj_mat\nfrom utils import save_model_dict\n\nnum_view = len(view_list)\nnum_class = len(LABEL_MAPPING_NAME)\nif num_class == 2:\n    adj_parameter = 2\n    dim_he_list = [200,200,100]\nif num_class > 2:\n    adj_parameter = 10\n#     dim_he_list = [400,400,200]\ndim_hvcdn= pow(num_class,num_view)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:51.130805Z","iopub.execute_input":"2024-05-31T15:29:51.131075Z","iopub.status.idle":"2024-05-31T15:29:51.901068Z","shell.execute_reply.started":"2024-05-31T15:29:51.131050Z","shell.execute_reply":"2024-05-31T15:29:51.900323Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"['/kaggle/working', '/kaggle/lib/kagglegym', '/kaggle/lib', '/opt/conda/lib/python37.zip', '/opt/conda/lib/python3.7', '/opt/conda/lib/python3.7/lib-dynload', '', '/root/.local/lib/python3.7/site-packages', '/opt/conda/lib/python3.7/site-packages', '/src/bq-helper', '/opt/conda/lib/python3.7/site-packages/IPython/extensions', '/root/.ipython', '/kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.2. Support functions","metadata":{}},{"cell_type":"code","source":"# II. prepairing raw data\ndef preprocessing_data(tup_tensor_test_data, data_folder):\n    data_tr_list = []\n    data_te_list = []\n#     print(view_list)\n\n    for i in view_list:\n        data_tr_list.append(torch.tensor(np.loadtxt(os.path.join(data_folder, str(i)+\"_tr.csv\"), delimiter=','),dtype=torch.float32))\n        data_te_list.append(tup_tensor_test_data[i-1])\n#         print(os.path.join(data_folder, str(i)+\"_tr.csv\"))\n#         print('tttd', tup_tensor_test_data[i-1].shape)\n#         print(data_tr_list[i-1].shape, data_te_list[i-1].shape)   \n        if cuda:\n            data_tr_list[i-1] = data_tr_list[i-1].to(device)\n            data_te_list[i-1] = data_te_list[i-1].to(device)       \n\n    # num train's records, test's records\n    num_tr = data_tr_list[0].shape[0]\n    num_te = data_te_list[0].shape[0]\n\n    # idx\n    trte_idx = {}\n    trte_idx[\"tr\"] = list(range(num_tr))\n    trte_idx[\"te\"] = list(range(num_tr, (num_tr+num_te)))\n\n    # num of views or num of omics\n    num_view = len(view_list)\n    data_tensor_list = []\n    for i in range(num_view):\n        data_tensor_list.append(torch.cat((data_tr_list[i], data_te_list[i]), axis=0))\n        if cuda:\n            data_tensor_list[i] = data_tensor_list[i].to(device)#cuda()\n    \n    data_train_list = []\n    data_trte_list = []\n    for i in range(len(data_tensor_list)):\n        data_train_list.append(data_tensor_list[i][trte_idx[\"tr\"]].clone())\n\n        tup_seq_data = (data_tensor_list[i][trte_idx[\"tr\"]].clone(), data_tensor_list[i][trte_idx[\"te\"]].clone())\n        data_trte_list.append(\n            torch.cat(tup_seq_data,axis=0)\n        )\n    return data_train_list, data_trte_list,trte_idx\n\n\n# III. For Feature Important\n\ndef custom_logit_predictor(*tup_tensor_data, data_folder):\n    for m in model_dict:\n        if cuda:\n            model_dict[m].to(device)#cuda()\n        model_dict[m].eval()\n    tup_tensor_data = tuple(tensor_data.to(device) if cuda else tensor_data for tensor_data in tup_tensor_data)\n#     print('tsd', tup_tensor_data[0].shape)\n    data_tr_list, data_trte_list, trte_idx = preprocessing_data(tup_tensor_data, data_folder)\n    _, adj_trte_list = gen_trte_adj_mat(data_tr_list, data_trte_list, trte_idx, adj_parameter)\n    \n    ci_list = []\n    num_view = len(view_list)\n    for i in range(num_view):\n        ci_list.append(model_dict[\"C{:}\".format(i+1)](model_dict[\"E{:}\".format(i+1)](data_trte_list[i],adj_trte_list[i])))\n    if num_view >= 2:\n        c = model_dict[\"C\"](ci_list)    \n    else:\n        c = ci_list[0]\n    c = c[trte_idx[\"te\"],:]\n#     prob = F.softmax(c, dim=1).data.cpu().numpy()\n    return c","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:51.903110Z","iopub.execute_input":"2024-05-31T15:29:51.903381Z","iopub.status.idle":"2024-05-31T15:29:52.028094Z","shell.execute_reply.started":"2024-05-31T15:29:51.903355Z","shell.execute_reply":"2024-05-31T15:29:52.027047Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"def load_model(data_folder, model_folder):\n    # ---- load paper's model1\n    data_tr_list, data_trte_list, trte_idx, labels_trte = prepare_trte_data(data_folder, view_list)\n    dim_list = [x.shape[1] for x in data_tr_list]\n\n    _model_dict = init_model_dict(num_view, num_class, dim_list, dim_he_list, dim_hvcdn)\n#     print(dim_he_list)\n    _model_dict = load_model_dict(model_folder, _model_dict)\n    # ---- Done\n    return _model_dict","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:52.030063Z","iopub.execute_input":"2024-05-31T15:29:52.030443Z","iopub.status.idle":"2024-05-31T15:29:52.039864Z","shell.execute_reply.started":"2024-05-31T15:29:52.030404Z","shell.execute_reply":"2024-05-31T15:29:52.039103Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.metrics import accuracy_score\n\ndef evaluate_model(bool_report = True, _type_data='te'):\n    # Accumulate ground truth and predictions\n    all_labels = []\n    all_preds = []\n\n    for idx in idx_list:\n        cur_model_folder = f'/kaggle/working/models/{idx}'\n        cur_data_folder = f\"{data_folder}/{idx}/\"\n        model_dict = load_model(cur_data_folder, cur_model_folder)\n    #     print(cur_model_folder)\n\n        _data_list=[]\n\n        _label = labels_te = np.loadtxt(os.path.join(cur_data_folder, f\"labels_{_type_data}.csv\"), delimiter=',').astype(int)\n\n        for i in view_list:\n            _data_loc = os.path.join(cur_data_folder, f\"{i}_{_type_data}.csv\")\n            _data_list.append(np.loadtxt(_data_loc, delimiter=','))\n        _tensor_data_list = tuple(torch.tensor(np_arr, dtype=torch.float32).to(device) for np_arr in _data_list)\n        pred = custom_logit_predictor(*_tensor_data_list, data_folder=cur_data_folder)\n\n        pred = np.array(torch.argmax(pred.cpu(), dim=1))\n\n        all_labels.extend(_label)\n        all_preds.extend(pred)\n\n    # Convert lists to numpy arrays\n    all_labels = np.array(all_labels)\n    all_preds = np.array(all_preds)\n    \n    if bool_report:\n        # Compute overall classification report\n        clf_report = classification_report(all_labels, all_preds, target_names=LABEL_MAPPING_NAME, digits=4, zero_division=0, output_dict=True)\n        clf_df = pd.DataFrame(clf_report)\n        clf_df.loc[['precision', 'recall'], 'accuracy'] = np.nan\n\n        # Compute confusion matrix\n        conf_matrix = confusion_matrix(all_labels, all_preds)\n\n        # Display results\n        fig, (ax1, ax2) = plt.subplots(1, 2)\n        fig.set_figwidth(12)\n        ConfusionMatrixDisplay(conf_matrix, display_labels=LABEL_MAPPING_NAME).plot(cmap='Blues', ax=ax1)\n        sns.heatmap(clf_df.iloc[:-1, :].T, annot=True, cmap='Blues', robust=True, ax=ax2, fmt='.2%')\n        plt.show()\n    \n    return accuracy_score(all_labels, all_preds)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:52.041014Z","iopub.execute_input":"2024-05-31T15:29:52.041316Z","iopub.status.idle":"2024-05-31T15:29:52.110769Z","shell.execute_reply.started":"2024-05-31T15:29:52.041287Z","shell.execute_reply":"2024-05-31T15:29:52.110050Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"if bool_tuning:\n    import optuna\n    import contextlib\n    import io\n    \n    def objective(trial):\n        global num_epoch_pretrain, num_epoch, lr_e_pretrain, lr_e, lr_c, dim_he_list, patience, model_dict\n\n        if trial.number == 0:\n            num_epoch_pretrain = trial.suggest_int('num_epoch_pretrain', 500, 500)\n            num_epoch = trial.suggest_int('num_epoch', 2000, 2000)\n            lr_e_pretrain = trial.suggest_loguniform('lr_e_pretrain', 1e-3, 1e-3)\n            lr_e = trial.suggest_loguniform('lr_e', 5e-4, 5e-4)\n            lr_c = trial.suggest_loguniform('lr_c', 1e-3, 1e-3)\n            dim_he_list = [trial.suggest_int('dim_he1', 400, 400), \n                           trial.suggest_int('dim_he2', 400, 400), \n                           trial.suggest_int('dim_he3', 200, 200)]\n            patience = trial.suggest_int('patience', 200, 200)\n        else:\n            num_epoch_pretrain = trial.suggest_int('num_epoch_pretrain', 500, 1000)\n            num_epoch = trial.suggest_int('num_epoch', 500, 2000)\n            lr_e_pretrain = trial.suggest_loguniform('lr_e_pretrain', 1e-5, 1e-3)\n            lr_e = trial.suggest_loguniform('lr_e', 1e-5, 1e-3)\n            lr_c = trial.suggest_loguniform('lr_c', 1e-5, 1e-3)\n            dim_he_list = [trial.suggest_int('dim_he1', 128, 512), \n                           trial.suggest_int('dim_he2', 128, 512), \n                           trial.suggest_int('dim_he3', 64, 256)]\n            patience = trial.suggest_int('patience', 50, 300)\n\n    #     print(dim_he_list)\n\n        for fold_id in idx_list:\n#             print(f'idx data: {fold_id}')\n            data_folder_idx = data_folder + f'/{fold_id}'\n            model_folder_idx = model_folder + f'/{fold_id}'\n\n            if not bool_using_early_stopping:\n                patience = None\n\n            with contextlib.redirect_stdout(io.StringIO()):\n                model_dict = train_test(\n                    data_folder_idx,\n                    view_list,\n                    num_class,\n                    lr_e_pretrain,\n                    lr_e,\n                    lr_c,\n                    num_epoch_pretrain,\n                    num_epoch,\n                    rseed,\n                    postfix_tr,\n                    postfix_te,\n                    patience,\n                    verbose,\n                    dim_he_list\n                )\n\n            save_model_dict(model_folder_idx, model_dict)\n\n#         accuracy = (evaluate_model(bool_report=False, _type_data='tr') * 171\n#                 + evaluate_model(bool_report=False, _type_data='val') * 58\n#                 + evaluate_model(bool_report=False, _type_data='te') * 41) / 270\n#         return accuracy\n        acc_lst = [evaluate_model(bool_report=False, _type_data='tr'),\n                  evaluate_model(bool_report=False, _type_data='val'),\n                  evaluate_model(bool_report=False, _type_data='te')]\n        mean = np.mean(acc_lst)\n#         std_dev = np.std(acc_lst)\n        \n#         if std_dev == 0:\n#             return 1e9\n        \n#         snr = mean / std_dev\n        return mean\n\n    # Define the study\n    study = optuna.create_study(direction='maximize')  # Accuracy is maximized\n    study.optimize(objective, n_trials=20)\n    \n    # Take results from best params\n    best_params = study.best_params\n    num_epoch_pretrain = best_params['num_epoch_pretrain']\n    num_epoch = best_params['num_epoch']\n    lr_e_pretrain = best_params['lr_e_pretrain']\n    lr_e = best_params['lr_e']\n    lr_c = best_params['lr_c']\n    dim_he_list = [best_params['dim_he1'], best_params['dim_he2'], best_params['dim_he3']]\n    patience = best_params['patience']\n\n    # Best hyperparameters\n    print('Best hyperparameters: ', best_params)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:52.111928Z","iopub.execute_input":"2024-05-31T15:29:52.112277Z","iopub.status.idle":"2024-05-31T15:29:52.128645Z","shell.execute_reply.started":"2024-05-31T15:29:52.112241Z","shell.execute_reply":"2024-05-31T15:29:52.127730Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"for fold_id in idx_list:\n    print(f'idx data: {fold_id}')\n    \n    data_folder_idx = data_folder + f'/{fold_id}'\n    model_folder_idx = model_folder + f'/{fold_id}'\n    \n    if not bool_using_early_stopping:\n        patience=None\n    model_dict = train_test(\n        data_folder_idx,\n        view_list,\n        num_class,\n        lr_e_pretrain,\n        lr_e,\n        lr_c,\n        num_epoch_pretrain,\n        num_epoch,\n        rseed,\n        postfix_tr,\n        postfix_te,\n        patience,\n        verbose,\n        dim_he_list\n    )\n    save_model_dict(model_folder_idx, model_dict)\n    \n    print('*'*100)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:29:52.129887Z","iopub.execute_input":"2024-05-31T15:29:52.130202Z","iopub.status.idle":"2024-05-31T15:31:34.351223Z","shell.execute_reply.started":"2024-05-31T15:29:52.130174Z","shell.execute_reply":"2024-05-31T15:31:34.350191Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"idx data: 1\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 450th after 185 epochs not increasing score from epoch 265th with best score 0.8620689655172413\n****************************************************************************************************\nidx data: 2\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 291th after 185 epochs not increasing score from epoch 106th with best score 0.8421052631578947\n****************************************************************************************************\nidx data: 3\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 348th after 185 epochs not increasing score from epoch 163th with best score 0.8947368421052632\n****************************************************************************************************\nidx data: 4\n\nPretrain GCNs...\n\nTraining...\nEarly stop at epoch 265th after 185 epochs not increasing score from epoch 80th with best score 0.7894736842105263\n****************************************************************************************************\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.3. Load trained models and check accuracy phase 1","metadata":{}},{"cell_type":"code","source":"print(\"ACC on train set\")\nevaluate_model(_type_data = 'tr')\nprint(\"ACC on val set\")\nevaluate_model(_type_data = 'val')\nprint(\"ACC on test set\")\nevaluate_model(_type_data = 'te')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:31:34.352469Z","iopub.execute_input":"2024-05-31T15:31:34.352786Z","iopub.status.idle":"2024-05-31T15:32:09.815752Z","shell.execute_reply.started":"2024-05-31T15:31:34.352753Z","shell.execute_reply":"2024-05-31T15:32:09.814873Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"ACC on train set\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 4 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"ACC on val set\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 4 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"ACC on test set\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 4 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"0.6280487804878049"},"metadata":{}}]},{"cell_type":"markdown","source":"# MODULE 2: Integrated Gradient","metadata":{}},{"cell_type":"markdown","source":"## 2.1. Baselines","metadata":{}},{"cell_type":"markdown","source":"Support functions","metadata":{}},{"cell_type":"code","source":"# Tính trung bình theo cột (micro mean)\ndef micro_mean_per_column(matrix):\n    means = np.mean(matrix, axis=0)\n    return torch.tensor(means, dtype=torch.float).unsqueeze(0)\n\n# Tính trung bình theo cột (macro mean) theo từng nhóm nhãn\ndef macro_mean_per_column(matrix, labels):\n    unique_labels = np.unique(labels)\n    means = np.zeros(matrix.shape[1])\n    for col in range(matrix.shape[1]):\n        col_means = [\n            np.mean(matrix[labels == label, col]) \n            for label in unique_labels\n        ]\n        means[col] = np.mean(col_means)\n    return torch.tensor(means, dtype=torch.float).unsqueeze(0)\n\ndef micro_mean_per_column_excluding_subtype(matrix, labels, subtype_idx):\n    original_num_columns = matrix.shape[1]\n    indices_to_include = np.where(labels != subtype_idx)[0]\n    matrix = matrix[indices_to_include]\n    means = np.sum(matrix, axis=0) / original_num_columns\n    return torch.tensor(means, dtype=torch.float).unsqueeze(0)\n\ndef macro_mean_per_column_excluding_subtype(matrix, labels, subtype_idx):\n    unique_labels = np.unique(labels)\n    means = np.zeros(matrix.shape[1])\n    for col in range(matrix.shape[1]):\n        col_means = [\n            np.mean(matrix[labels == label, col]) \n            for label in unique_labels \n            if label != subtype_idx\n        ]\n        means[col] = np.mean(col_means)\n    return torch.tensor(means, dtype=torch.float).unsqueeze(0)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:32:09.816941Z","iopub.execute_input":"2024-05-31T15:32:09.817202Z","iopub.status.idle":"2024-05-31T15:32:09.828412Z","shell.execute_reply.started":"2024-05-31T15:32:09.817175Z","shell.execute_reply":"2024-05-31T15:32:09.827494Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"import torch\nfrom scipy.stats import mode","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:32:09.829518Z","iopub.execute_input":"2024-05-31T15:32:09.829814Z","iopub.status.idle":"2024-05-31T15:32:09.842170Z","shell.execute_reply.started":"2024-05-31T15:32:09.829779Z","shell.execute_reply":"2024-05-31T15:32:09.841449Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"all_baselines_name = [\n    'baseline_ig_zeros',\n    'baseline_ig_micro_means',\n    'baseline_ig_macro_means',\n    'baseline_ig_dict_default_micro_means',\n    'baseline_ig_dict_default_macro_means',\n    'baseline_ig_micro_mean_zero1',\n    'baseline_ig_micro_mean_zero2',\n    'baseline_ig_micro_mean_zero3',\n    'baseline_ig_macro_mean_zero1',\n    'baseline_ig_macro_mean_zero2',\n    'baseline_ig_macro_mean_zero3',\n]\nnum_baselines = len(all_baselines_name)\nall_baselines = [0] #list(range(11))","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:32:09.843283Z","iopub.execute_input":"2024-05-31T15:32:09.843535Z","iopub.status.idle":"2024-05-31T15:32:09.852030Z","shell.execute_reply.started":"2024-05-31T15:32:09.843510Z","shell.execute_reply":"2024-05-31T15:32:09.851182Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"import torch\nimport numpy as np\nfrom scipy.stats import mode\n\ndef init_baselines(input, _label, ith_baseline, excluded_subtype_idx=None):\n    _data_list = []\n    for omic_id in view_list:\n        matrix = input[omic_id - 1]\n        if isinstance(matrix, torch.Tensor):\n            matrix = matrix.cpu().numpy()\n        _data_list.append(matrix)\n\n    # IG-zeros----------------------------------------------------------------------------\n    if ith_baseline == 0:\n        baseline_ig_zeros = tuple(torch.zeros((1, matrix.shape[1]), dtype=torch.float) for matrix in _data_list)\n        return baseline_ig_zeros\n\n    # IG-micro-means-----------------------------------------------------------------------\n    if ith_baseline == 1:\n        baseline_ig_micro_means = []\n        for matrix in _data_list:\n            tmp = micro_mean_per_column(matrix)\n            baseline_ig_micro_means.append(tmp)\n        baseline_ig_micro_means = tuple(baseline_ig_micro_means)\n        return baseline_ig_micro_means\n    \n    # IG-macro-means----------------------------------------------------------------\n    if ith_baseline == 2:\n        baseline_ig_macro_means = []\n        for matrix in _data_list:\n            tmp = macro_mean_per_column(matrix, _label)\n            baseline_ig_macro_means.append(tmp)\n        baseline_ig_macro_means = tuple(baseline_ig_macro_means)\n        return baseline_ig_macro_means\n    \n    # IG-dict-default-micro-means-------------------------------------------------------------\n    if ith_baseline == 3 and subtype_idx is not None:\n        baseline_ig_dict_default_micro_means = []\n        for matrix in _data_list:\n            tmp = micro_mean_per_column_excluding_subtype(matrix, _label, subtype_idx)\n            baseline_ig_dict_default_micro_means.append(tmp)\n        baseline_ig_dict_default_micro_means = tuple(baseline_ig_dict_default_micro_means)\n        return baseline_ig_dict_default_micro_means\n    \n    # IG-dict-default-macro-means--------------------------------------------------------\n    if ith_baseline == 4 and subtype_idx is not None:\n        baseline_ig_dict_default_macro_means = []\n        for matrix in _data_list:\n            tmp = macro_mean_per_column_excluding_subtype(matrix, _label, subtype_idx)\n            baseline_ig_dict_default_macro_means.append(tmp)\n        baseline_ig_dict_default_macro_means = tuple(baseline_ig_dict_default_macro_means)\n        return baseline_ig_dict_default_macro_means\n    \n    # IG-micro-mean--zero----------------------------------------------------------------\n    if ith_baseline in [5,6,7]:\n        excluded_omic_id = ith_baseline - 4\n        baseline_ig_micro_mean_zero = []\n        for omic_id, matrix in enumerate(_data_list):\n            if (omic_id != excluded_omic_id):\n                tmp = micro_mean_per_column(matrix)\n                baseline_ig_micro_mean_zero.append(tmp)\n            else:\n                baseline_ig_micro_mean_zero.append(torch.zeros((1, matrix.shape[1]), dtype=torch.float))\n        baseline_ig_micro_mean_zero = tuple(baseline_ig_micro_mean_zero)\n        return baseline_ig_micro_mean_zero\n    \n    # IG-macro-mean--zero----------------------------------------------------------------\n    if ith_baseline in [8,9,10]:\n        excluded_omic_id = ith_baseline - 7\n        baseline_ig_macro_mean_zero = []\n        for omic_id, matrix in enumerate(_data_list):\n            if (omic_id != excluded_omic_id):\n                tmp = macro_mean_per_column(matrix, _label)\n                baseline_ig_macro_mean_zero.append(tmp)\n            else:\n                baseline_ig_macro_mean_zero.append(torch.zeros((1, matrix.shape[1]), dtype=torch.float))\n        baseline_ig_macro_mean_zero = tuple(baseline_ig_macro_mean_zero)\n        return baseline_ig_macro_mean_zero\n\n\n    return None  # Trả về None nếu chỉ số ith_baseline không hợp lệ","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:32:09.853167Z","iopub.execute_input":"2024-05-31T15:32:09.853437Z","iopub.status.idle":"2024-05-31T15:32:09.870146Z","shell.execute_reply.started":"2024-05-31T15:32:09.853411Z","shell.execute_reply":"2024-05-31T15:32:09.869296Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"## 2.2. Calculate IG's score of each feature from: data + trained model","metadata":{}},{"cell_type":"code","source":"def calculate_attribution_scores_for_folder(input, _label, data_folder, ith_baseline):\n    \n    # Initialize Integrated Gradients with the custom model predictor\n    ig = IntegratedGradients(lambda *inputs: custom_logit_predictor(*inputs, data_folder=data_folder))\n    \n    # Calculate attribute scores by batch data to avoid running out of memory\n    # 200 is the maximum (approximate) number of samples that will not cause run out of memory\n    max_samples_per_batch = 100\n    number_of_samples = len(_label)\n    list_end_index = [max_samples_per_batch * times \n                      for times in range(1, int(np.ceil(number_of_samples / max_samples_per_batch)))] + [number_of_samples]\n\n    if ith_baseline not in [3,4]:\n        # Initialize baseline\n        baseline = init_baselines(input, _label, ith_baseline)\n        if cuda:\n            baseline = tuple(tensor_i.cuda() for tensor_i in baseline)\n\n        # Ensure the custom logit predictor is called with the baseline and data_folder\n        custom_logit_predictor(*baseline, data_folder=data_folder)\n\n        # Preprocess data\n        data_tr_list, data_trte_list, trte_idx = preprocessing_data(baseline, data_folder=data_folder)\n    \n    attr = {}\n    for subtype_idx, subtype in enumerate(LABEL_MAPPING_NAME):\n        if ith_baseline in [3,4]:\n            # Initialize baseline\n            baseline = init_baselines(input, _label, ith_baseline, subtype_idx)\n            if cuda:\n                baseline = tuple(tensor_i.cuda() for tensor_i in baseline)\n\n            # Ensure the custom logit predictor is called with the baseline and data_folder\n            custom_logit_predictor(*baseline, data_folder=data_folder)\n\n            # Preprocess data\n            data_tr_list, data_trte_list, trte_idx = preprocessing_data(baseline, data_folder=data_folder)\n        \n        start = 0\n#         print(f'Calculate attribution scores with subtype {subtype}:')\n        for end in list_end_index:\n#             print(f'\\t samples from iloc {start} to {end}')\n            \n            input_tensor = tuple(input_omic[start:end].requires_grad_() for input_omic in input)\n            \n            # NEVER FORGET TO PUT BASELINE IN\n            attr_temp, delta_temp = ig.attribute(input_tensor,baseline,\n                                                 target=subtype_idx, return_convergence_delta=True)\n            # Concatenate genes attribute score for multi-omics data\n            attr_temp = np.concatenate(\n                tuple(attr_temp[idx_atr].detach().cpu().numpy() for idx_atr in range(len(attr_temp))), axis=1\n            )\n            if start == 0:\n                attr[subtype] = attr_temp\n            else:\n                attr[subtype] = np.concatenate((attr[subtype], attr_temp), axis=0)\n            start = end\n    print(f\"Attribution scores for data in folder {data_folder} calculated.\")\n    return attr","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-31T15:32:09.871283Z","iopub.execute_input":"2024-05-31T15:32:09.871670Z","iopub.status.idle":"2024-05-31T15:32:09.885410Z","shell.execute_reply.started":"2024-05-31T15:32:09.871640Z","shell.execute_reply":"2024-05-31T15:32:09.884546Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"## 2.3. RANK THE GENE BY ATTR SCORES AND MAPPING NAMES","metadata":{}},{"cell_type":"markdown","source":"**A new version just in case in the future, there are duplicates names between many types of omics**\n\n**A new version just in case in the future, there are duplicates names between many types of omics**\n- **Current version**: calculate attribute scores -> assign attribute scores with names -> sort -> take the top 50 genes -> ...find 50 names in 2503 names -> extract with the indices of 50 names in the original list 2503 names\n\n$\\implies$ however Mr.Hoang took the step that: take the avg scores of same gene in 3 types of omic data to eliminate the duplicate genes in 2503 genes\n\n$\\implies$ is it really fair? what if $\\text{significant scores} + \\frac{\\text{low scores}}{3} = \\text{normal scores}$; at that we have ignored a significant gene\n\n- **Below version**: calculate attribute scores -> add a column as indices with these attribution scores (like original indices to trace back like sorting problem) -> sort -> take the top 50 genes -> take the original indices also sorted according to these 50 genes -> extract the original list with these indices.","metadata":{}},{"cell_type":"code","source":"!pip install captum --quiet\nfrom captum.attr import IntegratedGradients","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:32:09.886546Z","iopub.execute_input":"2024-05-31T15:32:09.886917Z","iopub.status.idle":"2024-05-31T15:32:17.269733Z","shell.execute_reply.started":"2024-05-31T15:32:09.886882Z","shell.execute_reply":"2024-05-31T15:32:17.268655Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"matrix_top_thres_lst = [[] for _ in range(num_baselines)]\nindices_matrix_top_thres_lst = [[] for _ in range(num_baselines)]\n\nfor ith_baseline in all_baselines:\n    print('-' * 20, all_baselines_name[ith_baseline], '-' * 20)\n    \n    # Initialize an empty dictionary to store aggregated df_attr for each subtype\n    aggregated_rank_scores = {subtype: pd.Series(dtype=float) for subtype in LABEL_MAPPING_NAME}\n\n    for idx in idx_list:\n        cur_model_folder = f'/kaggle/working/models/{idx}'\n        cur_data_folder = f\"{data_folder}/{idx}/\"\n        model_dict = load_model(cur_data_folder, cur_model_folder)\n        print(cur_model_folder)\n\n        _data_list=[]\n        _type_data = 'te'\n        # _type_data = 'tr'\n\n        _label = labels_te = np.loadtxt(os.path.join(cur_data_folder, f\"labels_{_type_data}.csv\"), delimiter=',').astype(int)\n\n        for i in view_list:\n            _data_loc = os.path.join(cur_data_folder, f\"{i}_{_type_data}.csv\")\n            _data_list.append(np.loadtxt(_data_loc, delimiter=','))\n        _tensor_data_list = tuple(torch.tensor(np_arr,dtype=torch.float32).to(device) for np_arr in _data_list)\n        pred = custom_logit_predictor(*_tensor_data_list, data_folder=cur_data_folder)\n\n        attr = calculate_attribution_scores_for_folder(_tensor_data_list, _label, cur_data_folder, ith_baseline)\n\n        gene_name = []\n        for v in view_list:\n            df = pd.read_csv(os.path.join(cur_data_folder, f\"{v}_featname.csv\"), header=None, sep=',')    \n            gene_name.extend(df[0].str.split(r'\\|').str[0].values.tolist())\n\n        df_attr = {}\n        # Build dataframe and rename gene id to gene name\n        for subtype in LABEL_MAPPING_NAME:\n            df_attr[subtype] = pd.DataFrame(attr[subtype], columns=gene_name)\n\n        # Take mean all column (gene name) that have same name\n        for subtype in LABEL_MAPPING_NAME:\n            df_attr[subtype] = df_attr[subtype].groupby(by=df_attr[subtype].columns, axis=1).mean()\n\n        # y predict by classifier/pretrained model\n        y_predict = pred\n        y_interpret = labels_te\n\n        for idx_sub, subtype in enumerate(LABEL_MAPPING_NAME):\n            temp_score = df_attr[subtype].loc[np.where((y_interpret == idx_sub))[0],:].mean(axis=0).abs()\n#             print(temp_score.shape)\n            aggregated_rank_scores[subtype] = aggregated_rank_scores[subtype].add(temp_score, fill_value=0)\n#             print(aggregated_rank_scores[subtype].index.shape, aggregated_rank_scores[subtype].index.unique().shape)\n\n    THRESHOLD = 10\n    matrix_top_threshold = pd.DataFrame()\n    indices_matrix_top_threshold = pd.DataFrame()\n    for idx, subtype in enumerate(LABEL_MAPPING_NAME):\n        new_col = pd.Series(range(1, len(aggregated_rank_scores[subtype]) + 1), index=temp_score.index, name = \"idx\")\n        tmp_scores= aggregated_rank_scores[subtype]\n        tmp_scores = pd.concat([tmp_scores, new_col], axis = 1)\n#         print(tmp_scores)\n        tmp_scores.columns = [subtype, 'idx']\n        rank_score_by_subtype = tmp_scores.sort_values(by=subtype, ascending=False)\n#         print(rank_score_by_subtype)\n\n        if len(LABEL_MAPPING_NAME) == 2:\n            # Binary Classifier\n            threshold_inner = THRESHOLD\n            count_inner = rank_score_by_subtype.iloc[:threshold_inner].index.nunique()\n            while count_inner < THRESHOLD:\n                threshold_inner += 1\n                count_inner = rank_score_by_subtype.iloc[:threshold_inner].index.nunique()\n\n            temp = rank_score_by_subtype.iloc[:threshold_inner].index.to_series()\n            matrix_top_threshold[subtype] = temp[~temp.duplicated(keep='first')].reset_index(drop=True)\n        else:\n            # Multi-class Classifier\n            matrix_top_threshold[subtype] = rank_score_by_subtype.iloc[:THRESHOLD].index.tolist()\n            indices_matrix_top_threshold[subtype] = list(rank_score_by_subtype['idx'].iloc[:THRESHOLD])\n            print(f'SUBTYPE: {subtype}',indices_matrix_top_threshold[subtype])\n\n\n\n    save_matrix_dir = f'/kaggle/working/biomarkers/{ith_baseline}_{all_baselines_name[ith_baseline]}'\n    os.makedirs(save_matrix_dir, exist_ok=True)\n    matrix_top_threshold.to_csv(f'{save_matrix_dir}/matrix_biomarkers.csv',index=False)\n    indices_matrix_top_threshold.to_csv(f'{save_matrix_dir}/indices_matrix_biomarkers.csv',index=False)\n\n    #     Displaying gene for debugging\n    print(\"INDICES OF TOP GENES\", indices_matrix_top_threshold)\n    print()\n    for thres in np.linspace(10,100,10,dtype=int):\n        print(f'Number of unique genes top {thres}:',len(set(matrix_top_threshold.iloc[:thres,:].to_numpy(copy=True).reshape(-1).tolist())))\n\n    print()\n    display(HTML(matrix_top_threshold.iloc[:20,:].to_html()))\n    \n    matrix_top_thres_lst[ith_baseline] = matrix_top_threshold\n    indices_matrix_top_thres_lst[ith_baseline] = indices_matrix_top_threshold\n    \n    print('*' * 70)\n    print('\\n\\n')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T17:32:35.664297Z","iopub.execute_input":"2024-05-31T17:32:35.664665Z","iopub.status.idle":"2024-05-31T17:33:43.582510Z","shell.execute_reply.started":"2024-05-31T17:32:35.664634Z","shell.execute_reply":"2024-05-31T17:33:43.581652Z"},"trusted":true},"execution_count":67,"outputs":[{"name":"stdout","text":"-------------------- baseline_ig_zeros --------------------\n/kaggle/working/models/1\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/1/ calculated.\n/kaggle/working/models/2\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/2/ calculated.\n/kaggle/working/models/3\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/3/ calculated.\n/kaggle/working/models/4\nAttribution scores for data in folder /kaggle/input/tcga-gbm-methxgexcnv-2000-3-omics/TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler/4/ calculated.\nSUBTYPE: Classical 0    3243\n1    3836\n2    3810\n3     186\n4    2040\n5    3145\n6    1851\n7    1621\n8    4883\n9    4596\nName: Classical, dtype: int64\nSUBTYPE: Neural 0    2271\n1    4149\n2    4725\n3    4699\n4    1811\n5    3397\n6    1157\n7     869\n8    2830\n9     902\nName: Neural, dtype: int64\nSUBTYPE: Proneural 0    3848\n1     125\n2    4782\n3     664\n4    4284\n5    2630\n6    2548\n7    2225\n8     819\n9    4777\nName: Proneural, dtype: int64\nSUBTYPE: Mesenchymal 0     577\n1    1904\n2     923\n3     987\n4    1666\n5    2768\n6    2171\n7     869\n8    4776\n9    3810\nName: Mesenchymal, dtype: int64\nINDICES OF TOP GENES    Classical  Neural  Proneural  Mesenchymal\n0       3243    2271       3848          577\n1       3836    4149        125         1904\n2       3810    4725       4782          923\n3        186    4699        664          987\n4       2040    1811       4284         1666\n5       3145    3397       2630         2768\n6       1851    1157       2548         2171\n7       1621     869       2225          869\n8       4883    2830        819         4776\n9       4596     902       4777         3810\n\nNumber of unique genes top 10: 38\nNumber of unique genes top 20: 38\nNumber of unique genes top 30: 38\nNumber of unique genes top 40: 38\nNumber of unique genes top 50: 38\nNumber of unique genes top 60: 38\nNumber of unique genes top 70: 38\nNumber of unique genes top 80: 38\nNumber of unique genes top 90: 38\nNumber of unique genes top 100: 38\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Classical</th>\n      <th>Neural</th>\n      <th>Proneural</th>\n      <th>Mesenchymal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>PFN2</td>\n      <td>LANCL2</td>\n      <td>S100A13</td>\n      <td>CABYR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>RUFY1</td>\n      <td>SNORA73</td>\n      <td>AKTIP</td>\n      <td>HN1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>RPN2</td>\n      <td>VOPP1</td>\n      <td>YPEL5</td>\n      <td>CORO1C</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AP3D1</td>\n      <td>USP34</td>\n      <td>CCK</td>\n      <td>CTDSP1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>IL13RA1</td>\n      <td>H2AFV</td>\n      <td>SUCLG2</td>\n      <td>GCM2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>P4HA2</td>\n      <td>PPIA</td>\n      <td>MIR4311</td>\n      <td>MRPS33</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>HEG1</td>\n      <td>DNAH11</td>\n      <td>MEGF11</td>\n      <td>KCNS3</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>FZR1</td>\n      <td>CLGN</td>\n      <td>KIRREL</td>\n      <td>CLGN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>ZNF337</td>\n      <td>MYO7A</td>\n      <td>CHCHD7</td>\n      <td>YBX1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>TRIP6</td>\n      <td>COL18A1</td>\n      <td>YIPF1</td>\n      <td>RPN2</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}},{"name":"stdout","text":"**********************************************************************\n\n\n\n","output_type":"stream"}]},{"cell_type":"code","source":"print(len(aggregated_rank_scores['Classical']))\nprint(rank_score_by_subtype['Classical'])","metadata":{"execution":{"iopub.status.busy":"2024-05-31T17:24:04.174100Z","iopub.execute_input":"2024-05-31T17:24:04.174503Z","iopub.status.idle":"2024-05-31T17:24:04.182649Z","shell.execute_reply.started":"2024-05-31T17:24:04.174464Z","shell.execute_reply":"2024-05-31T17:24:04.181666Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stdout","text":"5043\nPFN2       0.203117\nRUFY1      0.195673\nRPN2       0.183108\nAP3D1      0.180584\nIL13RA1    0.175306\n             ...   \nFBXL8      0.000060\nPRODH      0.000059\nMGC9850    0.000050\nMIR4311    0.000000\nMEGF11     0.000000\nName: Classical, Length: 5043, dtype: float64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 2.4. New code","metadata":{}},{"cell_type":"code","source":"num_models=4\nmodel_folder = '/kaggle/working/models'\nbiomarkers_folder = '/kaggle/working/biomarkers/' + 'TCGA_GBM_METHxGExCNV_2000x2000x2000_MinMaxScaler'\nbiomarker_file_name = f'mogonet_full_top_biomarkers_sorted_desc_score_{num_models}models.csv'\npostfix_tr = '_tr'\npostfix_te = '_val'\ntopn = 30\nif Run_no_IG:\n    !python '/kaggle/input/{dataset_name}/main_biomarker.py' '{data_folder}' '{model_folder}' '{view_list}' '{num_models}' '{postfix_tr}' '{postfix_te}' '{biomarkers_folder}' '{biomarker_file_name}' '{topn}'","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-05-31T15:33:25.415889Z","iopub.execute_input":"2024-05-31T15:33:25.416168Z","iopub.status.idle":"2024-05-31T15:33:25.421822Z","shell.execute_reply.started":"2024-05-31T15:33:25.416138Z","shell.execute_reply":"2024-05-31T15:33:25.420932Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"# MODULE 3: PHASE 3\n## 3.1. Check with other genes","metadata":{}},{"cell_type":"code","source":"ha_biomarker_lst=['CASP3', 'TNF', 'IL6', 'AKT1', 'TP53', 'BAX', 'BCL2', 'PARP1', 'CCND1', 'CDKN1A', \n                  'RELA', 'HMOX1', 'H2AX', 'ABCB1', 'NFKBIA', 'BCL2L1', 'SOD2', 'CCL2', 'COL1A1', 'GSTP1']\n\ndef print_genes_ovarlap(df, top_gene, compared_lst):\n    # Flatten the list of lists into a single list\n    tmp = np.unique(df.iloc[:top_gene,:].values).flatten()\n    \n    # Find the common biomarkers\n    com_biomarkers = np.unique([bio for bio in tmp if bio in compared_lst])\n    \n    # Print the results\n    print(f\"Found {len(com_biomarkers)} in top {len(tmp)} genes\", end=\"\")\n    if len(com_biomarkers) > 0:\n        print(\": \", com_biomarkers, end=\"\")\n    print('\\n', '-' * 70)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:33:25.423054Z","iopub.execute_input":"2024-05-31T15:33:25.423422Z","iopub.status.idle":"2024-05-31T15:33:25.434886Z","shell.execute_reply.started":"2024-05-31T15:33:25.423386Z","shell.execute_reply":"2024-05-31T15:33:25.434065Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# Old code overlap:\n\nfor ith_baseline in all_baselines:\n    print(all_baselines_name[ith_baseline])\n    matrix_top_threshold = matrix_top_thres_lst[ith_baseline]\n#     print(matrix_top_threshold.head())\n    print_genes_ovarlap(matrix_top_threshold, 20, ha_biomarker_lst)\n    print_genes_ovarlap(matrix_top_threshold, 30, ha_biomarker_lst)\n    print_genes_ovarlap(matrix_top_threshold, 100, ha_biomarker_lst)\n    print('*' * 70)\n    print('\\n\\n')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:33:25.436018Z","iopub.execute_input":"2024-05-31T15:33:25.436389Z","iopub.status.idle":"2024-05-31T15:33:25.456527Z","shell.execute_reply.started":"2024-05-31T15:33:25.436354Z","shell.execute_reply":"2024-05-31T15:33:25.455685Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"baseline_ig_zeros\nFound 0 in top 74 genes\n ----------------------------------------------------------------------\nFound 0 in top 110 genes\n ----------------------------------------------------------------------\nFound 0 in top 325 genes\n ----------------------------------------------------------------------\n**********************************************************************\n\n\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# New code overlap\nif Run_no_IG:\n    biomarker_score=pd.read_csv(f\"{biomarkers_folder}/{biomarker_file_name}\")\n    biomarker=biomarker_score[[\"feat_name\"]]\n    print_genes_ovarlap(biomarker, 100, ha_biomarker_lst)\n    print_genes_ovarlap(biomarker, 300, ha_biomarker_lst)\n    print_genes_ovarlap(biomarker, 400, ha_biomarker_lst)\n    print_genes_ovarlap(biomarker, 1000, ha_biomarker_lst)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:33:25.457665Z","iopub.execute_input":"2024-05-31T15:33:25.457943Z","iopub.status.idle":"2024-05-31T15:33:25.464943Z","shell.execute_reply.started":"2024-05-31T15:33:25.457916Z","shell.execute_reply":"2024-05-31T15:33:25.464088Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":"## 3.2. TEST WITH CLASSIC ML ALGO\n- Extracting genes with top scores from calculated attr scores of genes","metadata":{}},{"cell_type":"code","source":"from sklearn import svm\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import balanced_accuracy_score, accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom statistics import mean, stdev\nfrom sklearn.model_selection import cross_val_score\n\ndef phase3_SVM(matrix_top_threshold, indices_matrix_top_threshold, data_folder):\n    # Initialize lists to store the metrics for each fold\n    recall_list = []\n    precision_list = []\n    f1_list = []\n    accuracy_list = []\n    cross_val_scores = []\n    \n    for idx_model in idx_list:\n        cur_data_folder = f\"{data_folder}/{idx_model}/\"\n#         print(f\"Fold {idx_model}:\")\n        #--------------------------------------------------------------------------------------------\n        list_genes = matrix_top_threshold.stack().to_frame().reset_index(drop=True)\n        idx_genes = indices_matrix_top_threshold.stack().to_frame().reset_index(drop=True)\n\n        # Convert 1st (and only) column of idx_genes into a Python list\n        column_to_convert = idx_genes.iloc[:, 0]\n        list_from_column = column_to_convert.tolist()\n        sorted_idx_genes = sorted(list_from_column)\n        idx_genes = sorted_idx_genes\n        \n        len_each_omic = [tmp.shape[1] for tmp in _data_list]\n\n        idx_each_omic = []\n        tmp = len_each_omic[0]\n        tmp_idx = 0\n        lower_bound = 0\n        for data in _data_list:\n            idx_an_omic = [values - lower_bound for values in idx_genes if values < tmp and values >= lower_bound]\n        #     print(idx_genes)\n        #     print(tmp)\n        #     print(lower_bound)\n            idx_each_omic.append(idx_an_omic)\n            lower_bound += len_each_omic[tmp_idx]\n            tmp_idx += 1\n            if tmp_idx < len(len_each_omic):\n                tmp += len_each_omic[tmp_idx]\n\n        # concat data\n        data_concat = []\n        for i, tmp in enumerate(idx_each_omic):\n            train_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_tr.csv\"), delimiter=',', header=None)\n            selected_columns = train_tmp.iloc[:, tmp]\n            data_concat.append(selected_columns.values)\n\n        X_train = np.hstack(data_concat)\n        y_train = pd.read_csv(os.path.join(cur_data_folder,\"labels_tr.csv\"), header=None) \n        y_train = y_train[0].tolist()\n\n        # Just to check and debug\n#         print(X_train.shape)\n        # print(len(labels_tr))\n\n        #--------------------------------------------------------------------------------------------\n        data_test_concat = []\n        for i,tmp in enumerate(idx_each_omic):\n            test_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_te.csv\"), delimiter=',', header=None)\n            selected_columns = test_tmp.iloc[:, tmp]\n            data_test_concat.append(selected_columns.values)\n\n        X_test = np.hstack(data_test_concat)\n        y_test = pd.read_csv(os.path.join(cur_data_folder,\"labels_te.csv\"), header=None) \n        y_test = labels_te.tolist()\n\n        # Just to check and debug\n#         print(X_test.shape)\n        # print(len(labels_te))\n\n\n    # At this moment;\n\n    # Phase 1: model => use train data\n    # Phase 2: xAI to find MOGONET => many options:\n    # Use test data: the same with MOGONET\n    # Use dev + train data: Mr.Hoang recommends to do this\n    # Use train data:\n    # Phase 3: many options too => Whatever thay are; please remember: diving one test to be fixed and train data: KFold on that train data\n    # Use train data - test data\n    # Use train data - dev to tune - test data (KFold)\n\n        #--------------------------------------------------------------------------------------------\n        model = svm.SVC() \n        params_grid = {'C': [0.1, 1, 10, 100, 1000],  \n                      'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n                      'kernel': ['rbf']}\n        skf = StratifiedKFold(n_splits=4)\n\n        #---------------------Step 1: Tuning the hyperparas -----------------------------------------------------------------------\n        svm_model = GridSearchCV(model, param_grid=params_grid, cv=skf).fit(X_train, y_train)\n\n        # Not sure about this line\n        # svm.fit(X_train, Y_train)\n#         print('Best parameters:', svm_model.best_params_)\n#         print('Best score:', svm_model.best_score_)\n\n\n        #---------------------Step 2: Check the results of tuning -----------------------------------------------------------------------\n        score = cross_val_score(svm_model, X_train, y_train, cv=skf)\n        cross_val_scores.extend(score)  # Collect all cross-validation scores\n        svm_cv_score = score.mean()\n        svm_cv_stdev = stdev(score)\n#         print('Cross Validation Recall scores are: {}'.format(score))\n#         print('Average Cross Validation Recall score: ', svm_cv_score)\n#         print('Cross Validation Recall standard deviation: ', svm_cv_stdev)\n\n        #---------------------Step 3: Try the estimated models with test set -----------------------------------------------------------------------\n        y_pred = svm_model.predict(X_test)\n\n        svm_Recall = recall_score(y_test, y_pred, average='weighted')\n        svm_Precision = precision_score(y_test, y_pred, average='weighted', zero_division=1)\n        svm_f1 = f1_score(y_test, y_pred, average='weighted')\n        svm_accuracy = accuracy_score(y_test, y_pred)\n\n        # Append metrics to the lists\n        recall_list.append(svm_Recall)\n        precision_list.append(svm_Precision)\n        f1_list.append(svm_f1)\n        accuracy_list.append(svm_accuracy)\n        \n#         print(svm_Recall)\n#         print(svm_Precision)\n#         print(svm_f1)\n#         print(svm_accuracy)\n        \n    # Calculate average and standard deviation for each metric across all folds\n    avg_recall = mean(recall_list)\n    avg_precision = mean(precision_list)\n    avg_f1 = mean(f1_list)\n    avg_accuracy = mean(accuracy_list)\n\n    stdev_recall = stdev(recall_list)\n    stdev_precision = stdev(precision_list)\n    stdev_f1 = stdev(f1_list)\n    stdev_accuracy = stdev(accuracy_list)\n\n    print('Aggregated Results:')\n    print('Average Recall:', avg_recall, 'Standard Deviation:', stdev_recall)\n    print('Average Precision:', avg_precision, 'Standard Deviation:', stdev_precision)\n    print('Average F1 Score:', avg_f1, 'Standard Deviation:', stdev_f1)\n    print('Average Accuracy:', avg_accuracy, 'Standard Deviation:', stdev_accuracy)\n    print('Overall Cross Validation Recall score average:', mean(cross_val_scores))\n    print('Overall Cross Validation Recall score standard deviation:', stdev(cross_val_scores))\n    print('-' * 50)\n    print()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:33:25.466102Z","iopub.execute_input":"2024-05-31T15:33:25.466359Z","iopub.status.idle":"2024-05-31T15:33:25.574941Z","shell.execute_reply.started":"2024-05-31T15:33:25.466335Z","shell.execute_reply":"2024-05-31T15:33:25.574179Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"### 3.2.1. Phase 3 for old code","metadata":{}},{"cell_type":"code","source":"cur_model_folder = f'/kaggle/working/models'\nprint(cur_model_folder)\n\nfor ith_baseline in all_baselines:\n    print(all_baselines_name[ith_baseline])\n    phase3_SVM(matrix_top_thres_lst[ith_baseline], indices_matrix_top_thres_lst[ith_baseline], \n           data_folder)\n    print('*' * 70)\n    print('\\n\\n')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:33:25.575992Z","iopub.execute_input":"2024-05-31T15:33:25.576246Z","iopub.status.idle":"2024-05-31T15:33:43.342811Z","shell.execute_reply.started":"2024-05-31T15:33:25.576221Z","shell.execute_reply":"2024-05-31T15:33:43.341901Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"/kaggle/working/models\nbaseline_ig_zeros\nAggregated Results:\nAverage Recall: 0.45121951219512196 Standard Deviation: 0.01408171388267381\nAverage Precision: 0.7360739575137687 Standard Deviation: 0.00622320903847195\nAverage F1 Score: 0.3385192988142506 Standard Deviation: 0.011446265769526674\nAverage Accuracy: 0.45121951219512196 Standard Deviation: 0.01408171388267381\nOverall Cross Validation Recall score average: 0.3755191029900332\nOverall Cross Validation Recall score standard deviation: 0.056028659272969315\n--------------------------------------------------\n\n**********************************************************************\n\n\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### 3.2.2. Phase 3 for new code","metadata":{}},{"cell_type":"code","source":"if Run_no_IG:\n    cur_model_folder = f'/kaggle/working/models'\n    print(cur_model_folder)\n\n    top_genes = biomarker_score[[\"feat_name\"]].iloc[:400,:]\n    top_scores = biomarker_score[[\"imp\"]].iloc[:400,:]\n    phase3_SVM(top_genes, top_scores, data_folder)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:33:43.344027Z","iopub.execute_input":"2024-05-31T15:33:43.344322Z","iopub.status.idle":"2024-05-31T15:33:43.349424Z","shell.execute_reply.started":"2024-05-31T15:33:43.344291Z","shell.execute_reply":"2024-05-31T15:33:43.348476Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":"### 3.3. LG","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV, cross_val_score\nfrom sklearn.metrics import balanced_accuracy_score, accuracy_score, precision_score, recall_score, f1_score\nfrom statistics import mean, stdev\n\ndef phase3_LG(matrix_top_threshold, indices_matrix_top_threshold, data_folder):\n    # Initialize lists to store the metrics for each fold\n    recall_list = []\n    precision_list = []\n    f1_list = []\n    accuracy_list = []\n    cross_val_scores = []\n\n    for idx_model in idx_list:\n        cur_data_folder = f\"{data_folder}/{idx_model}/\"\n#         print(f\"Fold {idx_model}:\")\n        \n        # Load and process gene indices\n        list_genes = matrix_top_threshold.stack().to_frame().reset_index(drop=True)\n        idx_genes = indices_matrix_top_threshold.stack().to_frame().reset_index(drop=True)\n\n        column_to_convert = idx_genes.iloc[:, 0]\n        list_from_column = column_to_convert.tolist()\n        sorted_idx_genes = sorted(list_from_column)\n        idx_genes = sorted_idx_genes\n\n        len_each_omic = [tmp.shape[1] for tmp in _data_list]\n\n        idx_each_omic = []\n        lower_bound = 0\n        tmp_idx = 0\n        for data in _data_list:\n            idx_an_omic = [values - lower_bound for values in idx_genes if lower_bound <= values < lower_bound + len_each_omic[tmp_idx]]\n            idx_each_omic.append(idx_an_omic)\n            lower_bound += len_each_omic[tmp_idx]\n            tmp_idx += 1\n\n        # Concatenate training data\n        data_concat = []\n        for i, tmp in enumerate(idx_each_omic):\n            train_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_tr.csv\"), delimiter=',', header=None)\n            selected_columns = train_tmp.iloc[:, tmp]\n            data_concat.append(selected_columns.values)\n\n        X_train = np.hstack(data_concat)\n        y_train = pd.read_csv(os.path.join(cur_data_folder, \"labels_tr.csv\"), header=None)[0].tolist()\n\n        # Debug: Print shapes\n#         print(X_train.shape)\n\n        # Concatenate testing data\n        data_test_concat = []\n        for i, tmp in enumerate(idx_each_omic):\n            test_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_te.csv\"), delimiter=',', header=None)\n            selected_columns = test_tmp.iloc[:, tmp]\n            data_test_concat.append(selected_columns.values)\n\n        X_test = np.hstack(data_test_concat)\n        y_test = pd.read_csv(os.path.join(cur_data_folder, \"labels_te.csv\"), header=None)[0].tolist()\n\n        # Debug: Print shapes\n#         print(X_test.shape)\n\n        # Model training and hyperparameter tuning\n        model = LogisticRegression(max_iter=10000, multi_class='multinomial')  # Added multi_class='multinomial'\n        params_grid = {\n            'C': [0.1, 1, 10, 100, 1000],\n            'penalty': ['l2'],\n            'solver': ['lbfgs', 'saga']\n        }\n        skf = StratifiedKFold(n_splits=4)\n\n        lg_model = GridSearchCV(model, param_grid=params_grid, cv=skf).fit(X_train, y_train)\n#         print('Best parameters:', lg_model.best_params_)\n#         print('Best score:', lg_model.best_score_)\n\n        # Cross-validation scores\n        score = cross_val_score(lg_model.best_estimator_, X_train, y_train, cv=skf)\n        cross_val_scores.extend(score)  # Collect all cross-validation scores\n        lg_cv_score = mean(score)\n        lg_cv_stdev = stdev(score)\n#         print('Cross Validation Recall scores are:', score)\n#         print('Average Cross Validation Recall score:', lg_cv_score)\n#         print('Cross Validation Recall standard deviation:', lg_cv_stdev)\n\n        # Testing the model on the test set\n        y_pred = lg_model.predict(X_test)\n        lg_recall = recall_score(y_test, y_pred, average='weighted')\n        lg_precision = precision_score(y_test, y_pred, average='weighted', zero_division=1)\n        lg_f1 = f1_score(y_test, y_pred, average='weighted')\n        lg_accuracy = accuracy_score(y_test, y_pred)\n\n        # Append metrics to the lists\n        recall_list.append(lg_recall)\n        precision_list.append(lg_precision)\n        f1_list.append(lg_f1)\n        accuracy_list.append(lg_accuracy)\n\n#         print('Recall:', lg_recall)\n#         print('Precision:', lg_precision)\n#         print('F1 score:', lg_f1)\n#         print('Accuracy:', lg_accuracy)\n#         print('-' * 50)\n#         print()\n\n    # Calculate average and standard deviation for each metric across all folds\n    avg_recall = mean(recall_list)\n    avg_precision = mean(precision_list)\n    avg_f1 = mean(f1_list)\n    avg_accuracy = mean(accuracy_list)\n\n    stdev_recall = stdev(recall_list)\n    stdev_precision = stdev(precision_list)\n    stdev_f1 = stdev(f1_list)\n    stdev_accuracy = stdev(accuracy_list)\n\n    print('Aggregated Results:')\n    print('Average Recall:', avg_recall, 'Standard Deviation:', stdev_recall)\n    print('Average Precision:', avg_precision, 'Standard Deviation:', stdev_precision)\n    print('Average F1 Score:', avg_f1, 'Standard Deviation:', stdev_f1)\n    print('Average Accuracy:', avg_accuracy, 'Standard Deviation:', stdev_accuracy)\n    print('Overall Cross Validation Recall score average:', mean(cross_val_scores))\n    print('Overall Cross Validation Recall score standard deviation:', stdev(cross_val_scores))\n    print('-' * 50)\n    print()\n\n# Example usage\n# phase3(matrix_top_threshold, indices_matrix_top_threshold, data_folder, idx_list, _data_list)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:33:43.351131Z","iopub.execute_input":"2024-05-31T15:33:43.351583Z","iopub.status.idle":"2024-05-31T15:33:43.377145Z","shell.execute_reply.started":"2024-05-31T15:33:43.351542Z","shell.execute_reply":"2024-05-31T15:33:43.376182Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"cur_model_folder = f'/kaggle/working/models'\nprint(cur_model_folder)\n\nfor ith_baseline in all_baselines:\n    print(all_baselines_name[ith_baseline])\n    phase3_LG(matrix_top_thres_lst[ith_baseline], indices_matrix_top_thres_lst[ith_baseline], \n           data_folder)\n    print('*' * 70)\n    print('\\n\\n')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:33:43.378266Z","iopub.execute_input":"2024-05-31T15:33:43.378544Z","iopub.status.idle":"2024-05-31T15:34:24.956881Z","shell.execute_reply.started":"2024-05-31T15:33:43.378517Z","shell.execute_reply":"2024-05-31T15:34:24.955973Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"/kaggle/working/models\nbaseline_ig_zeros\nAggregated Results:\nAverage Recall: 0.4146341463414634 Standard Deviation: 0.019914550754334775\nAverage Precision: 0.6748030005560399 Standard Deviation: 0.013919883598988438\nAverage F1 Score: 0.2997124976610791 Standard Deviation: 0.01590797085702607\nAverage Accuracy: 0.4146341463414634 Standard Deviation: 0.019914550754334775\nOverall Cross Validation Recall score average: 0.3624031007751938\nOverall Cross Validation Recall score standard deviation: 0.039374961547907886\n--------------------------------------------------\n\n**********************************************************************\n\n\n\n","output_type":"stream"}]},{"cell_type":"code","source":"if Run_no_IG:\n    cur_model_folder = f'/kaggle/working/models'\n    print(cur_model_folder)\n\n    top_genes = biomarker_score[[\"feat_name\"]].iloc[:400,:]\n    top_scores = biomarker_score[[\"imp\"]].iloc[:400,:]\n    phase3_LG(top_genes, top_scores, data_folder)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:34:24.958096Z","iopub.execute_input":"2024-05-31T15:34:24.958382Z","iopub.status.idle":"2024-05-31T15:34:24.963129Z","shell.execute_reply.started":"2024-05-31T15:34:24.958353Z","shell.execute_reply":"2024-05-31T15:34:24.962130Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":"## 3.4. RF","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV, cross_val_score\nfrom sklearn.metrics import balanced_accuracy_score, accuracy_score, precision_score, recall_score, f1_score\nfrom statistics import mean, stdev\n\ndef phase3_RF(matrix_top_threshold, indices_matrix_top_threshold, data_folder):\n    # Initialize lists to store the metrics for each fold\n    recall_list = []\n    precision_list = []\n    f1_list = []\n    accuracy_list = []\n    cross_val_scores = []\n\n    for idx_model in idx_list:\n        cur_data_folder = f\"{data_folder}/{idx_model}/\"\n#         print(f\"Fold {idx_model}:\")\n        \n        # Load and process gene indices\n        list_genes = matrix_top_threshold.stack().to_frame().reset_index(drop=True)\n        idx_genes = indices_matrix_top_threshold.stack().to_frame().reset_index(drop=True)\n\n        column_to_convert = idx_genes.iloc[:, 0]\n        list_from_column = column_to_convert.tolist()\n        sorted_idx_genes = sorted(list_from_column)\n        idx_genes = sorted_idx_genes\n\n        len_each_omic = [tmp.shape[1] for tmp in _data_list]\n\n        idx_each_omic = []\n        lower_bound = 0\n        tmp_idx = 0\n        for data in _data_list:\n            idx_an_omic = [values - lower_bound for values in idx_genes if lower_bound <= values < lower_bound + len_each_omic[tmp_idx]]\n            idx_each_omic.append(idx_an_omic)\n            lower_bound += len_each_omic[tmp_idx]\n            tmp_idx += 1\n\n        # Concatenate training data\n        data_concat = []\n        for i, tmp in enumerate(idx_each_omic):\n            train_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_tr.csv\"), delimiter=',', header=None)\n            selected_columns = train_tmp.iloc[:, tmp]\n            data_concat.append(selected_columns.values)\n\n        X_train = np.hstack(data_concat)\n        y_train = pd.read_csv(os.path.join(cur_data_folder, \"labels_tr.csv\"), header=None)[0].tolist()\n\n        # Debug: Print shapes\n#         print(X_train.shape)\n\n        # Concatenate testing data\n        data_test_concat = []\n        for i, tmp in enumerate(idx_each_omic):\n            test_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_te.csv\"), delimiter=',', header=None)\n            selected_columns = test_tmp.iloc[:, tmp]\n            data_test_concat.append(selected_columns.values)\n\n        X_test = np.hstack(data_test_concat)\n        y_test = pd.read_csv(os.path.join(cur_data_folder, \"labels_te.csv\"), header=None)[0].tolist()\n\n        # Debug: Print shapes\n#         print(X_test.shape)\n\n        # Model training and hyperparameter tuning\n        model = RandomForestClassifier()\n        params_grid = {\n            'n_estimators': [50, 100, 200],\n            'max_depth': [None, 10, 20, 30],\n            'min_samples_split': [2, 5, 10],\n            'min_samples_leaf': [1, 2, 4]\n        }\n        skf = StratifiedKFold(n_splits=4)\n\n        rf_model = GridSearchCV(model, param_grid=params_grid, cv=skf).fit(X_train, y_train)\n#         print('Best parameters:', rf_model.best_params_)\n#         print('Best score:', rf_model.best_score_)\n\n        # Cross-validation scores\n        score = cross_val_score(rf_model.best_estimator_, X_train, y_train, cv=skf)\n        cross_val_scores.extend(score)  # Collect all cross-validation scores\n        rf_cv_score = mean(score)\n        rf_cv_stdev = stdev(score)\n#         print('Cross Validation Recall scores are:', score)\n#         print('Average Cross Validation Recall score:', rf_cv_score)\n#         print('Cross Validation Recall standard deviation:', rf_cv_stdev)\n\n        # Testing the model on the test set\n        y_pred = rf_model.predict(X_test)\n        rf_recall = recall_score(y_test, y_pred, average='weighted')\n        rf_precision = precision_score(y_test, y_pred, average='weighted', zero_division=1)\n        rf_f1 = f1_score(y_test, y_pred, average='weighted')\n        rf_accuracy = accuracy_score(y_test, y_pred)\n\n        # Append metrics to the lists\n        recall_list.append(rf_recall)\n        precision_list.append(rf_precision)\n        f1_list.append(rf_f1)\n        accuracy_list.append(rf_accuracy)\n\n#         print('Recall:', rf_recall)\n#         print('Precision:', rf_precision)\n#         print('F1 score:', rf_f1)\n#         print('Accuracy:', rf_accuracy)\n#         print('-' * 50)\n#         print()\n\n    # Calculate average and standard deviation for each metric across all folds\n    avg_recall = mean(recall_list)\n    avg_precision = mean(precision_list)\n    avg_f1 = mean(f1_list)\n    avg_accuracy = mean(accuracy_list)\n\n    stdev_recall = stdev(recall_list)\n    stdev_precision = stdev(precision_list)\n    stdev_f1 = stdev(f1_list)\n    stdev_accuracy = stdev(accuracy_list)\n\n    print('Aggregated Results:')\n    print('Average Recall:', avg_recall, 'Standard Deviation:', stdev_recall)\n    print('Average Precision:', avg_precision, 'Standard Deviation:', stdev_precision)\n    print('Average F1 Score:', avg_f1, 'Standard Deviation:', stdev_f1)\n    print('Average Accuracy:', avg_accuracy, 'Standard Deviation:', stdev_accuracy)\n    print('Overall Cross Validation Recall score average:', mean(cross_val_scores))\n    print('Overall Cross Validation Recall score standard deviation:', stdev(cross_val_scores))\n    print('-' * 50)\n    print()\n\n# Example usage\n# phase3(matrix_top_threshold, indices_matrix_top_threshold, data_folder, idx_list, _data_list)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:34:24.964220Z","iopub.execute_input":"2024-05-31T15:34:24.964475Z","iopub.status.idle":"2024-05-31T15:34:25.086119Z","shell.execute_reply.started":"2024-05-31T15:34:24.964451Z","shell.execute_reply":"2024-05-31T15:34:25.085445Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"X_train = []\ny_train = []\nX_test = []\ny_test = []\nidx_model = 1\ncur_data_folder = f\"{data_folder}/{idx_model}/\"\n#         print(f\"Fold {idx_model}:\")\n# Load and process gene indices\nlist_genes = matrix_top_threshold.stack().to_frame().reset_index(drop=True)\nidx_genes = indices_matrix_top_threshold.stack().to_frame().reset_index(drop=True)\nprint(list_genes)\nprint(idx_genes)\ncolumn_to_convert = idx_genes.iloc[:, 0]\nlist_from_column = column_to_convert.tolist()\nsorted_idx_genes = sorted(list_from_column)\nidx_genes = sorted_idx_genes\n\nlen_each_omic = [tmp.shape[1] for tmp in _data_list]\n\nidx_each_omic = []\nlower_bound = 0\ntmp_idx = 0\nfor data in _data_list:\n    idx_an_omic = [values - lower_bound for values in idx_genes if lower_bound <= values < lower_bound + len_each_omic[tmp_idx]]\n    idx_each_omic.append(idx_an_omic)\n    lower_bound += len_each_omic[tmp_idx]\n    tmp_idx += 1\n\n        # Concatenate training data\ndata_concat = []\nfor i, tmp in enumerate(idx_each_omic):\n    train_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_tr.csv\"), delimiter=',', header=None)\n    selected_columns = train_tmp.iloc[:, tmp]\n    data_concat.append(selected_columns.values)\n\nX_train = np.hstack(data_concat)\ny_train = pd.read_csv(os.path.join(cur_data_folder, \"labels_tr.csv\"), header=None)[0].tolist()\n\n# Debug: Print shapes\nprint(X_train.shape)\nprint(len(y_train))\n# Concatenate testing data\n\ndata_test_concat = []\nfor i, tmp in enumerate(idx_each_omic):\n    test_tmp = pd.read_csv(os.path.join(cur_data_folder, f\"{i + 1}_te.csv\"), delimiter=',', header=None)\n    selected_columns = test_tmp.iloc[:, tmp]\n    data_test_concat.append(selected_columns.values)\n\nX_test = np.hstack(data_test_concat)\ny_test = pd.read_csv(os.path.join(cur_data_folder, \"labels_te.csv\"), header=None)[0].tolist()\n\nprint(X_test.shape)\nprint(len(y_test))","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:50:30.882503Z","iopub.execute_input":"2024-05-31T15:50:30.882875Z","iopub.status.idle":"2024-05-31T15:50:31.953013Z","shell.execute_reply.started":"2024-05-31T15:50:30.882840Z","shell.execute_reply":"2024-05-31T15:50:31.952096Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"          0\n0      PFN2\n1    LANCL2\n2   S100A13\n3     CABYR\n4     RUFY1\n5   SNORA73\n6     AKTIP\n7       HN1\n8      RPN2\n9     VOPP1\n10    YPEL5\n11   CORO1C\n12    AP3D1\n13    USP34\n14      CCK\n15   CTDSP1\n16  IL13RA1\n17    H2AFV\n18   SUCLG2\n19     GCM2\n20    P4HA2\n21     PPIA\n22  MIR4311\n23   MRPS33\n24     HEG1\n25   DNAH11\n26   MEGF11\n27    KCNS3\n28     FZR1\n29     CLGN\n30   KIRREL\n31     CLGN\n32   ZNF337\n33    MYO7A\n34   CHCHD7\n35     YBX1\n36    TRIP6\n37  COL18A1\n38    YIPF1\n39     RPN2\n           0\n0   0.203117\n1   0.167242\n2   0.171834\n3   0.127811\n4   0.195673\n5   0.153951\n6   0.144825\n7   0.110562\n8   0.183108\n9   0.140365\n10  0.140915\n11  0.108632\n12  0.180584\n13  0.130092\n14  0.135221\n15  0.099732\n16  0.175306\n17  0.127396\n18  0.131934\n19  0.094731\n20  0.174199\n21  0.125306\n22  0.131093\n23  0.093997\n24  0.169068\n25  0.124526\n26  0.123166\n27  0.093110\n28  0.166501\n29  0.123426\n30  0.118605\n31  0.092283\n32  0.166245\n33  0.121435\n34  0.117964\n35  0.091714\n36  0.164327\n37  0.118466\n38  0.117649\n39  0.091084\n(171, 40)\n171\n(41, 40)\n41\n","output_type":"stream"}]},{"cell_type":"code","source":"cur_model_folder = f'/kaggle/working/models'\nprint(cur_model_folder)\n\nfor ith_baseline in all_baselines:\n    print(all_baselines_name[ith_baseline])\n    phase3_RF(matrix_top_thres_lst[ith_baseline], indices_matrix_top_thres_lst[ith_baseline], \n           data_folder)\n    print('*' * 70)\n    print('\\n\\n')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:34:25.252433Z","iopub.status.idle":"2024-05-31T15:34:25.252879Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if Run_no_IG:\n    cur_model_folder = f'/kaggle/working/models'\n    print(cur_model_folder)\n\n    top_genes = biomarker_score[[\"feat_name\"]].iloc[:400,:]\n    top_scores = biomarker_score[[\"imp\"]].iloc[:400,:]\n    phase3_RF(top_genes, top_scores, data_folder)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T15:34:25.253907Z","iopub.status.idle":"2024-05-31T15:34:25.254297Z"},"trusted":true},"execution_count":null,"outputs":[]}]}